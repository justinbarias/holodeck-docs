{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HoloDeck - AI Agent Experimentation Platform","text":"<p>HoloDeck is an open-source experimentation platform for building, testing, and deploying AI agents through YAML configuration. Define intelligent agents entirely through configuration\u2014no code required.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>No-Code Agent Definition: Define agents, tools, and evaluations in simple YAML files</li> <li>Multi-Provider Support: OpenAI, Azure OpenAI, Anthropic (add more via MCP)</li> <li>Flexible Tool Integration: Vector stores, custom functions, MCP servers, and AI-powered tools</li> <li>Built-in Testing &amp; Evaluation: Run evaluations with multiple metrics, customize models per metric</li> <li>Production-Ready: Deploy agents as FastAPI endpoints with Docker support</li> <li>Multimodal Test Support: Images, PDFs, Word docs, Excel sheets, and mixed media in test cases</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#1-install-holodeck","title":"1. Install HoloDeck","text":"<pre><code>pip install holodeck-ai\n</code></pre>"},{"location":"#2-create-a-simple-agent","title":"2. Create a Simple Agent","text":"<p>Create <code>my-agent.yaml</code>:</p> <pre><code>name: \"My First Agent\"\ndescription: \"A helpful AI assistant\"\nmodel:\n  provider: \"openai\"\n  name: \"gpt-4o-mini\"\n  temperature: 0.7\n  max_tokens: 1000\ninstructions:\n  inline: |\n    You are a helpful AI assistant.\n    Answer questions accurately and concisely.\n</code></pre>"},{"location":"#3-load-and-use-the-agent","title":"3. Load and Use the Agent","text":"<pre><code>from holodeck.config.loader import ConfigLoader\n\n# Load agent configuration\nloader = ConfigLoader()\nagent = loader.load_agent_yaml(\"my-agent.yaml\")\n\nprint(f\"Loaded agent: {agent.name}\")\nprint(f\"Model: {agent.model.name}\")\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Getting Started - Installation and setup</li> <li>Quickstart Guide - Minimal working example with error handling</li> <li>Agent Configuration - Complete schema reference</li> <li>Tools Guide - All tool types explained with examples</li> <li>Evaluations - Testing and evaluation framework</li> <li>Global Configuration - System-wide settings and precedence rules</li> <li>API Reference - Python API documentation</li> <li>Architecture - System design and components</li> </ul>"},{"location":"#examples","title":"Examples","text":"<p>Browse complete examples:</p> <ul> <li><code>basic_agent.yaml</code> - Minimal valid agent</li> <li><code>with_tools.yaml</code> - All tool types</li> <li><code>with_evaluations.yaml</code> - Testing and metrics</li> <li><code>with_global_config.yaml</code> - Configuration precedence</li> </ul>"},{"location":"#features-overview","title":"Features Overview","text":""},{"location":"#define-agents-in-yaml","title":"Define Agents in YAML","text":"<pre><code>name: Research Assistant\ndescription: Answers research questions with citations\nmodel:\n  provider: openai\n  name: gpt-4o\ntools:\n  - type: vectorstore\n    source: \"research-papers.json\"\n    vector_field: \"embeddings\"\n    chunk_size: 500\n  - type: mcp\n    server: \"web-search\"\n    description: Search the web for current information\nevaluations:\n  metrics:\n    - name: groundedness\n      threshold: 0.8\n    - name: relevance\n      threshold: 0.75\n</code></pre>"},{"location":"#support-multiple-tool-types","title":"Support Multiple Tool Types","text":"<ol> <li>Vector Search - Semantic search over documents and embeddings</li> <li>Functions - Execute custom Python code from files</li> <li>MCP Servers - Standardized integrations (GitHub, filesystem, databases, custom)</li> <li>Prompt Tools - AI-powered semantic functions with templates</li> </ol>"},{"location":"#flexible-model-configuration","title":"Flexible Model Configuration","text":"<p>Configure LLM models at three levels:</p> <ul> <li>Global: Default model for all agents</li> <li>Agent: Override for specific agent</li> <li>Metric: Fine-grained per-evaluation-metric (GPT-4 for critical metrics, GPT-4o-mini for others)</li> </ul>"},{"location":"#multimodal-test-cases","title":"Multimodal Test Cases","text":"<p>Test agents with rich media:</p> <pre><code>test_cases:\n  - input: \"Analyze this image and PDF\"\n    files:\n      - image.png\n      - document.pdf\n    expected_tools: [\"vision_analyzer\"]\n    ground_truth: \"Expected analysis result\"\n</code></pre>"},{"location":"#project-status","title":"Project Status","text":"<p>Version: 0.1.0 (Pre-release)</p> <ul> <li>\u2705 Core configuration schema (Pydantic models)</li> <li>\u2705 YAML parsing and validation</li> <li>\u2705 Environment variable support</li> <li>\u2705 File reference resolution</li> <li>\u23f3 CLI interface (planned for v0.2)</li> <li>\u23f3 Agent execution engine (planned for v0.2)</li> <li>\u23f3 Evaluation framework (planned for v0.2)</li> <li>\u23f3 Deployment tools (planned for v0.3)</li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub Issues: Report bugs or suggest features</li> <li>Discussions: Ask questions and share ideas</li> <li>Contributing: Read CONTRIBUTING.md to get involved</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT License - See LICENSE file for details</p> <p>Next Steps:</p> <ul> <li>Get started with installation \u2192</li> <li>Try the quickstart \u2192</li> <li>Explore examples \u2192</li> </ul>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to HoloDeck will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#planned-features","title":"Planned Features","text":"<ul> <li>Agent Engine Phase 2: Agent execution and LLM interaction</li> <li>Tool Execution: Dynamic tool loading and execution</li> <li>Evaluation Engine: AI-powered metrics (groundedness, relevance) and NLP metrics (F1, BLEU, ROUGE)</li> <li>Deployment Engine: Convert agents to production FastAPI endpoints</li> <li>CLI Commands: <code>holodeck run</code>, <code>holodeck evaluate</code>, <code>holodeck deploy</code></li> <li>Observability: OpenTelemetry integration with GenAI semantic conventions</li> <li>Plugin System: Pre-built plugin packages for common integrations</li> <li>Vector Stores: Redis/Postgres-backed semantic search support</li> </ul>"},{"location":"CHANGELOG/#001-2025-10-19","title":"[0.0.1] - 2025-10-19","text":""},{"location":"CHANGELOG/#added-user-story-1-define-agent-configuration","title":"Added - User Story 1: Define Agent Configuration","text":""},{"location":"CHANGELOG/#core-features","title":"Core Features","text":"<ul> <li>Agent Configuration Schema: Complete YAML-based agent configuration with Pydantic validation</li> <li>Agent metadata (name, description)</li> <li>LLM provider configuration (OpenAI, Azure OpenAI, Anthropic)</li> <li>Model parameters (temperature, max_tokens)</li> <li>Instructions (inline or file-based)</li> <li>Tools array with type discrimination</li> <li>Test cases with expected behavior validation</li> <li> <p>Evaluation metrics with flexible model configuration</p> </li> <li> <p>Configuration Loading &amp; Validation (<code>ConfigLoader</code>):</p> </li> <li>Load and parse agent.yaml files</li> <li>Validate against Pydantic schema with user-friendly error messages</li> <li>File path resolution (relative to agent.yaml directory)</li> <li>Environment variable substitution (${VAR_NAME} pattern)</li> <li> <p>Precedence hierarchy: agent.yaml &gt; environment variables &gt; global config</p> </li> <li> <p>Global Configuration Support:</p> </li> <li>Load ~/.holodeck/config.yaml for system-wide settings</li> <li>Provider configurations at global level</li> <li>Tool configurations at global level</li> <li>Configuration merging with proper precedence</li> </ul>"},{"location":"CHANGELOG/#data-models","title":"Data Models","text":"<ul> <li>LLMProvider Model:</li> <li>Multi-provider support (openai, azure_openai, anthropic)</li> <li>Model selection and parameter configuration</li> <li>Temperature range validation (0-2)</li> <li>Max tokens validation (&gt;0)</li> <li> <p>Azure-specific endpoint configuration</p> </li> <li> <p>Tool Models (Discriminated Union):</p> </li> <li>VectorstoreTool: Vector search with source, embedding model, chunk size/overlap</li> <li>FunctionTool: Python function tools with parameters schema</li> <li>MCPTool: Model Context Protocol server integration</li> <li>PromptTool: AI-powered semantic functions with template support</li> <li> <p>Tool type validation and discrimination</p> </li> <li> <p>Evaluation Models:</p> </li> <li>Metric configuration with name, threshold, enabled flag</li> <li>Per-metric model override for flexible configuration</li> <li> <p>AI-powered and NLP metrics support</p> </li> <li> <p>TestCase Model:</p> </li> <li>Test inputs with expected behaviors</li> <li>Ground truth for validation</li> <li>Expected tool usage tracking</li> <li> <p>Evaluation metrics per test</p> </li> <li> <p>Agent Model:</p> </li> <li>Complete agent definition</li> <li>All field validations and constraints</li> <li> <p>Tool and evaluation composition</p> </li> <li> <p>GlobalConfig Model:</p> </li> <li>Provider registry</li> <li>Vectorstore configurations</li> <li>Deployment settings</li> </ul>"},{"location":"CHANGELOG/#error-handling","title":"Error Handling","text":"<ul> <li>Custom Exception Hierarchy:</li> <li><code>HoloDeckError</code>: Base exception</li> <li><code>ConfigError</code>: Configuration-specific errors</li> <li><code>ValidationError</code>: Schema validation errors with field details</li> <li> <p><code>FileNotFoundError</code>: File resolution errors with path suggestions</p> </li> <li> <p>Human-Readable Error Messages:</p> </li> <li>Field names and types in validation errors</li> <li>Actual vs. expected values</li> <li>File paths with suggestions</li> <li>Nested error flattening for complex schemas</li> </ul>"},{"location":"CHANGELOG/#infrastructure-tooling","title":"Infrastructure &amp; Tooling","text":"<ul> <li>Development Setup:</li> <li>Makefile with 30+ development commands</li> <li>Poetry dependency management</li> <li>Pre-commit hooks (black, ruff, mypy, detect-secrets)</li> <li> <p>Python 3.14+ support</p> </li> <li> <p>Testing:</p> </li> <li>Unit test suite with 11 test files covering all models</li> <li>Integration test suite for end-to-end workflows</li> <li>80%+ code coverage requirement</li> <li> <p>Test execution: <code>make test</code>, <code>make test-coverage</code>, <code>make test-parallel</code></p> </li> <li> <p>Code Quality:</p> </li> <li>Black code formatting (88 char line length)</li> <li>Ruff linting (pycodestyle, pyflakes, isort, flake8-bugbear, pyupgrade, pep8-naming, flake8-simplify, bandit)</li> <li>MyPy type checking with strict settings</li> <li>Security scanning (safety, bandit, detect-secrets)</li> <li> <p>Automated pre-commit validation</p> </li> <li> <p>Documentation:</p> </li> <li>MkDocs site configuration with Material theme</li> <li>Getting Started guide (installation, quickstart)</li> <li>Configuration guides (agent config, tools, evaluations, global config, file references)</li> <li>Example agent configurations (basic, with tools, with evaluations, with global config)</li> <li>API reference documentation (ConfigLoader, Pydantic models)</li> <li>Architecture documentation (configuration loading flow)</li> </ul>"},{"location":"CHANGELOG/#features-summary-by-component","title":"Features Summary by Component","text":""},{"location":"CHANGELOG/#configloader-api","title":"ConfigLoader API","text":"<pre><code>loader = ConfigLoader()\nagent = loader.load_agent_yaml(\"agent.yaml\")  # Returns Agent instance\n</code></pre> <ul> <li>Parse YAML to Agent instances</li> <li>Automatic environment variable substitution</li> <li>File reference resolution with validation</li> <li>Configuration precedence handling</li> <li>Comprehensive error reporting</li> </ul>"},{"location":"CHANGELOG/#schema-support","title":"Schema Support","text":"<ul> <li>File References: Instructions and tool definitions can be loaded from files</li> <li>Environment Variables: ${ENV_VAR} patterns supported throughout configs</li> <li>Type Discrimination: Tool types automatically validated and parsed</li> <li>Nested Validation: Complex nested structures validated properly</li> </ul>"},{"location":"CHANGELOG/#testing-coverage","title":"Testing Coverage","text":"<p>Unit Tests (11 files): - <code>test_errors.py</code> - Exception handling and messaging - <code>test_env_loader.py</code> - Environment variable substitution - <code>test_defaults.py</code> - Default configuration handling - <code>test_validator.py</code> - Validation utilities - <code>test_tool_models.py</code> - Tool type validation and discrimination - <code>test_llm_models.py</code> - LLM provider configuration - <code>test_evaluation_models.py</code> - Evaluation metric configuration - <code>test_testcase_models.py</code> - Test case validation - <code>test_agent_models.py</code> - Agent schema validation - <code>test_globalconfig_models.py</code> - Global configuration handling - <code>test_config_loader.py</code> - ConfigLoader functionality</p> <p>Integration Tests (1 file): - <code>test_config_end_to_end.py</code> - Full workflow testing</p>"},{"location":"CHANGELOG/#known-limitations","title":"Known Limitations","text":""},{"location":"CHANGELOG/#version-001-scope","title":"Version 0.0.1 Scope","text":"<ul> <li>CLI Not Implemented: No command-line interface (planned for User Story 2)</li> <li>No Agent Execution: Agent models are validated but not executed (Phase 2 feature)</li> <li>No Tool Execution: Tools are defined but not executed (Phase 2 feature)</li> <li>No Evaluation Engine: Metrics are configured but not executed (Phase 2 feature)</li> <li>No Deployment: No FastAPI endpoint generation or Docker deployment (Phase 2-3 features)</li> <li>No Observability: OpenTelemetry integration planned for Phase 2</li> <li>No Plugin System: Plugin packages not yet available (Phase 3 feature)</li> </ul>"},{"location":"CHANGELOG/#validation-limitations","title":"Validation Limitations","text":"<ul> <li>File Validation: Only checks file existence, not content validity</li> <li>LLM Provider APIs: No actual API testing (would require credentials)</li> <li>Tool Validation: Type validation only, no runtime validation</li> </ul>"},{"location":"CHANGELOG/#known-issues","title":"Known Issues","text":"<p>None reported in 0.0.1.</p>"},{"location":"CHANGELOG/#how-to-use-this-changelog","title":"How to Use This Changelog","text":"<ul> <li>[Unreleased]: Features coming in future releases</li> <li>Semantic Versioning: MAJOR.MINOR.PATCH</li> <li>MAJOR: Breaking changes or new architecture</li> <li>MINOR: New features and functionality</li> <li>PATCH: Bug fixes and improvements</li> <li>Categories: Added (new features), Changed (modifications), Fixed (bug fixes), Deprecated (to be removed), Removed (deprecated features deleted), Security (security fixes)</li> </ul>"},{"location":"CHANGELOG/#roadmap","title":"Roadmap","text":""},{"location":"CHANGELOG/#user-story-1-define-agent-configuration-001","title":"User Story 1: Define Agent Configuration \u2705 0.0.1","text":"<p>Implemented in 0.0.1: - YAML-based agent configuration - Schema validation - Configuration loading and merging - File references and environment variables</p>"},{"location":"CHANGELOG/#user-story-2-initialize-new-agent-project-planned-010","title":"User Story 2: Initialize New Agent Project (planned 0.1.0)","text":"<ul> <li><code>holodeck init</code> command</li> <li>Project scaffolding</li> <li>Template agent creation</li> <li>Directory structure setup</li> </ul>"},{"location":"CHANGELOG/#user-story-3-execute-agent-planned-010","title":"User Story 3: Execute Agent (planned 0.1.0)","text":"<ul> <li><code>holodeck run</code> command</li> <li>Agent execution engine</li> <li>LLM provider integration</li> <li>Tool execution runtime</li> </ul>"},{"location":"CHANGELOG/#user-story-4-evaluate-results-planned-020","title":"User Story 4: Evaluate Results (planned 0.2.0)","text":"<ul> <li><code>holodeck evaluate</code> command</li> <li>Evaluation metric execution</li> <li>AI-powered and NLP metrics</li> <li>Result reporting</li> </ul>"},{"location":"CHANGELOG/#user-story-5-deploy-agent-planned-020","title":"User Story 5: Deploy Agent (planned 0.2.0)","text":"<ul> <li><code>holodeck deploy</code> command</li> <li>FastAPI endpoint generation</li> <li>Docker containerization</li> <li>Cloud deployment support</li> </ul>"},{"location":"CHANGELOG/#user-story-6-observability-monitoring-planned-020","title":"User Story 6: Observability &amp; Monitoring (planned 0.2.0)","text":"<ul> <li>OpenTelemetry integration</li> <li>Trace and log instrumentation</li> <li>Cost tracking</li> <li>Performance monitoring</li> </ul>"},{"location":"CHANGELOG/#user-story-7-plugin-system-planned-030","title":"User Story 7: Plugin System (planned 0.3.0)","text":"<ul> <li>Plugin registry</li> <li>Plugin installation</li> <li>Pre-built plugin packages</li> <li>Custom plugin development</li> </ul>"},{"location":"CHANGELOG/#previous-versions","title":"Previous Versions","text":""},{"location":"CHANGELOG/#development-versions","title":"Development Versions","text":"<ul> <li>Pre-0.0.1: Architecture planning and vision definition</li> <li>Project vision (VISION.md)</li> <li>Architecture documentation</li> <li>Specification and planning</li> </ul>"},{"location":"CHANGELOG/#contributing","title":"Contributing","text":"<p>See CONTRIBUTING.md for guidelines on: - Development setup - Running tests - Code style requirements - Submitting pull requests</p>"},{"location":"CHANGELOG/#license","title":"License","text":"<p>HoloDeck is released under the MIT License. See LICENSE file for details.</p>"},{"location":"CHANGELOG/#changelog-format","title":"Changelog Format","text":"<p>We follow Keep a Changelog format:</p> <ul> <li>Added: New features</li> <li>Changed: Changes to existing functionality</li> <li>Deprecated: Features to be removed in future versions</li> <li>Removed: Features that have been removed</li> <li>Fixed: Bug fixes</li> <li>Security: Security-related changes</li> </ul>"},{"location":"CHANGELOG/#quick-links","title":"Quick Links","text":"<ul> <li>Getting Started</li> <li>Configuration Guide</li> <li>API Reference</li> <li>Contributing Guide</li> </ul>"},{"location":"contributing/","title":"Contributing to HoloDeck","text":"<p>Thank you for your interest in contributing to HoloDeck! This guide will help you get started with development, testing, and submitting your changes.</p>"},{"location":"contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Development Setup</li> <li>Running Tests</li> <li>Code Style Guide</li> <li>Commit Message Format</li> <li>Pull Request Workflow</li> <li>Pre-commit Hooks</li> </ul>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.14 or higher</li> <li>Git</li> <li>Virtual environment manager (venv)</li> </ul>"},{"location":"contributing/#initial-setup","title":"Initial Setup","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/yourusername/holodeck.git\ncd holodeck\n</code></pre> <ol> <li>Initialize the project:</li> </ol> <pre><code>make init\n</code></pre> <p>This command will: - Create a Python virtual environment (<code>.venv</code>) - Install all development dependencies - Set up pre-commit hooks</p> <ol> <li>Activate the virtual environment (if not already done by <code>make init</code>):</li> </ol> <pre><code>source .venv/bin/activate  # On macOS/Linux\n# or\n.venv\\Scripts\\activate  # On Windows\n</code></pre>"},{"location":"contributing/#manual-setup-if-make-init-doesnt-work","title":"Manual Setup (if <code>make init</code> doesn't work)","text":"<pre><code># Create virtual environment\npython3 -m venv .venv\n\n# Activate it\nsource .venv/bin/activate\n\n# Install development dependencies\nmake install-dev\n\n# Install pre-commit hooks\nmake install-hooks\n</code></pre>"},{"location":"contributing/#running-tests","title":"Running Tests","text":""},{"location":"contributing/#run-all-tests","title":"Run All Tests","text":"<pre><code>make test\n</code></pre>"},{"location":"contributing/#run-unit-tests-only","title":"Run Unit Tests Only","text":"<pre><code>make test-unit\n</code></pre>"},{"location":"contributing/#run-integration-tests-only","title":"Run Integration Tests Only","text":"<pre><code>make test-integration\n</code></pre>"},{"location":"contributing/#run-tests-with-coverage-report","title":"Run Tests with Coverage Report","text":"<pre><code>make test-coverage\n</code></pre> <p>This generates: - Terminal summary - HTML report: <code>htmlcov/index.html</code> - XML report: <code>coverage.xml</code></p> <p>Coverage Requirements: Minimum 80% coverage on all modules is enforced.</p>"},{"location":"contributing/#run-failed-tests-only","title":"Run Failed Tests Only","text":"<p>Quickly re-run tests that failed in the last run:</p> <pre><code>make test-failed\n</code></pre>"},{"location":"contributing/#run-tests-in-parallel","title":"Run Tests in Parallel","text":"<p>For faster test execution (requires pytest-xdist):</p> <pre><code>make test-parallel\n</code></pre>"},{"location":"contributing/#code-style-guide","title":"Code Style Guide","text":"<p>HoloDeck follows the Google Python Style Guide with tooling enforcement:</p>"},{"location":"contributing/#formatting","title":"Formatting","text":"<p>Code is automatically formatted using Black (88 character line length):</p> <pre><code>make format\n</code></pre>"},{"location":"contributing/#check-formatting-without-changes","title":"Check Formatting Without Changes","text":"<p>Verify code is properly formatted without modifying files:</p> <pre><code>make format-check\n</code></pre>"},{"location":"contributing/#linting","title":"Linting","text":"<p>Code quality is enforced using Ruff:</p> <pre><code>make lint\n</code></pre> <p>To auto-fix linting issues:</p> <pre><code>make lint-fix\n</code></pre> <p>Ruff includes: - pycodestyle (E, W) - pyflakes (F) - isort (I) - import sorting - flake8-bugbear (B) - bug detection - pyupgrade (UP) - Python syntax modernization - pep8-naming (N) - naming convention checks - flake8-simplify (SIM) - code simplification - flake8-bandit (S) - security checks</p>"},{"location":"contributing/#type-checking","title":"Type Checking","text":"<p>Type hints are required. Validate with MyPy:</p> <pre><code>make type-check\n</code></pre> <p>Type checking rules: - Full type coverage required (disallow untyped defs) - No <code>Any</code> types where avoidable - Strict optional checking enabled - Strict equality checking enabled</p>"},{"location":"contributing/#security-checks","title":"Security Checks","text":"<p>Run security scanning before committing:</p> <pre><code>make security\n</code></pre> <p>This includes: - Safety: Known vulnerability detection - Bandit: Security issue scanning - detect-secrets: Hardcoded secret detection</p>"},{"location":"contributing/#code-style-checklist","title":"Code Style Checklist","text":"<p>Before committing, ensure:</p> <ul> <li> Code is formatted: <code>make format</code></li> <li> Linting passes: <code>make lint</code></li> <li> Type checking passes: <code>make type-check</code></li> <li> Tests pass: <code>make test-coverage</code></li> <li> Security checks pass: <code>make security</code></li> </ul>"},{"location":"contributing/#commit-message-format","title":"Commit Message Format","text":"<p>Follow this format for commit messages:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n\n&lt;body&gt;\n\n&lt;footer&gt;\n</code></pre>"},{"location":"contributing/#type","title":"Type","text":"<p>Must be one of:</p> <ul> <li>feat: A new feature</li> <li>fix: A bug fix</li> <li>docs: Documentation only changes</li> <li>style: Code formatting changes (no functional changes)</li> <li>refactor: Code refactoring without feature changes</li> <li>perf: Performance improvements</li> <li>test: Test additions or modifications</li> <li>chore: Build, dependency, or tooling changes</li> <li>ci: CI/CD configuration changes</li> </ul>"},{"location":"contributing/#scope","title":"Scope","text":"<p>Optional. Scope of the change:</p> <ul> <li><code>config</code>: Configuration loading and validation</li> <li><code>models</code>: Pydantic data models</li> <li><code>cli</code>: Command-line interface</li> <li><code>loader</code>: YAML configuration loader</li> <li><code>tests</code>: Test infrastructure</li> <li><code>docs</code>: Documentation</li> <li><code>core</code>: Core engine functionality</li> </ul>"},{"location":"contributing/#subject","title":"Subject","text":"<ul> <li>Use imperative mood: \"add\" not \"added\" or \"adds\"</li> <li>Don't capitalize first letter</li> <li>No period at the end</li> <li>Limit to 50 characters</li> </ul>"},{"location":"contributing/#body","title":"Body","text":"<ul> <li>Optional. Explain what and why, not how.</li> <li>Wrap at 72 characters</li> <li>Separate from subject with blank line</li> <li>Use bullet points for multiple changes</li> </ul>"},{"location":"contributing/#footer","title":"Footer","text":"<ul> <li>Optional. Reference issues: <code>Closes #123</code></li> <li>Reference related PRs: <code>Refs #456</code></li> </ul>"},{"location":"contributing/#examples","title":"Examples","text":"<pre><code>feat(config): add support for environment variable substitution\n\nSupport ${VAR_NAME} pattern in YAML configurations.\nVariables are substituted before schema validation.\n\nCloses #42\n</code></pre> <pre><code>fix(models): correct validation for vector_field XOR vector_fields\n\nPreviously allowed both vector_field and vector_fields to be\nspecified simultaneously, violating the constraint.\n\nFixes #89\n</code></pre> <pre><code>docs: update installation instructions for Python 3.14\n</code></pre>"},{"location":"contributing/#pull-request-workflow","title":"Pull Request Workflow","text":""},{"location":"contributing/#before-creating-a-pr","title":"Before Creating a PR","text":"<ol> <li>Create a feature branch from <code>main</code>:</li> </ol> <pre><code>git checkout -b feat/your-feature-name\n</code></pre> <ol> <li>Implement your changes:</li> <li>Write tests first (TDD approach)</li> <li>Implement feature</li> <li> <p>Ensure all tests pass</p> </li> <li> <p>Run full validation:</p> </li> </ol> <pre><code>make ci\n</code></pre> <p>This runs: - Code formatting checks - Linting - Type checking - Test suite with coverage - Security scanning</p> <ol> <li>Commit with proper messages:</li> </ol> <pre><code>git add .\ngit commit -m \"feat(scope): descriptive message\"\n</code></pre> <ol> <li>Push to your fork:</li> </ol> <pre><code>git push origin feat/your-feature-name\n</code></pre>"},{"location":"contributing/#creating-a-pr","title":"Creating a PR","text":"<ol> <li>Visit the repository on GitHub</li> <li>Click \"New Pull Request\"</li> <li>Select your branch as the source</li> <li>Fill in the PR template:</li> </ol> <pre><code>## Description\nBrief description of changes\n\n## Type of Change\n- [ ] New feature\n- [ ] Bug fix\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Testing\nDescribe how you tested this change\n\n## Checklist\n- [ ] Tests pass locally (`make test`)\n- [ ] Code formatted (`make format`)\n- [ ] Type checking passes (`make type-check`)\n- [ ] Coverage \u226580%\n- [ ] Updated relevant documentation\n</code></pre>"},{"location":"contributing/#pr-requirements","title":"PR Requirements","text":"<p>Before a PR can be merged:</p> <p>\u2705 All checks must pass: - Formatting check - Linting - Type checking - Test coverage (\u226580%) - Security scanning</p> <p>\u2705 At least one review approval</p> <p>\u2705 No merge conflicts</p>"},{"location":"contributing/#code-review-process","title":"Code Review Process","text":"<ul> <li>Reviewers will check for:</li> <li>Code quality and style consistency</li> <li>Test coverage</li> <li>Performance implications</li> <li>Documentation accuracy</li> <li> <p>Security considerations</p> </li> <li> <p>Address feedback and push updates (do not force-push)</p> </li> <li>Re-request review after changes</li> <li>We aim to review within 1-2 business days</li> </ul>"},{"location":"contributing/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Pre-commit hooks automatically run before each commit to catch issues early.</p>"},{"location":"contributing/#install-pre-commit-hooks","title":"Install Pre-commit Hooks","text":"<pre><code>make install-hooks\n</code></pre>"},{"location":"contributing/#hooks-included","title":"Hooks Included","text":"<ul> <li>black: Code formatting</li> <li>ruff: Linting and import sorting</li> <li>mypy: Type checking</li> <li>detect-secrets: Secret detection</li> <li>trailing-whitespace: Remove trailing whitespace</li> <li>end-of-file-fixer: Ensure newline at EOF</li> </ul>"},{"location":"contributing/#bypass-pre-commit-use-carefully","title":"Bypass Pre-commit (Use Carefully!)","text":"<pre><code>git commit --no-verify\n</code></pre> <p>Only use this in exceptional circumstances and ensure you run the checks manually.</p>"},{"location":"contributing/#project-architecture","title":"Project Architecture","text":"<p>For understanding the codebase structure, see: - <code>docs/architecture/</code> - Architecture documentation - <code>docs/api/models.md</code> - Data model documentation - <code>docs/api/config-loader.md</code> - ConfigLoader API reference</p>"},{"location":"contributing/#common-issues","title":"Common Issues","text":""},{"location":"contributing/#virtual-environment-not-activated","title":"Virtual Environment Not Activated","text":"<p>Problem: <code>command not found: pytest</code></p> <p>Solution: <pre><code>source .venv/bin/activate\n</code></pre></p>"},{"location":"contributing/#type-checking-fails","title":"Type Checking Fails","text":"<p>Problem: MyPy reports type errors</p> <p>Solution: 1. Add type hints to function parameters and returns 2. For unavoidable types: <code># type: ignore</code> (use sparingly) 3. Check <code>Any</code> usage - prefer specific types</p>"},{"location":"contributing/#tests-fail-after-changes","title":"Tests Fail After Changes","text":"<p>Problem: Tests pass locally but fail in CI</p> <p>Solution: 1. Run full test suite: <code>make test</code> 2. Run with coverage: <code>make test-coverage</code> 3. Check for system-specific issues (paths, line endings)</p>"},{"location":"contributing/#security-scan-fails","title":"Security Scan Fails","text":"<p>Problem: Security checks report issues</p> <p>Solution: 1. Run locally: <code>make security</code> 2. Fix hardcoded secrets or security vulnerabilities 3. Update <code>.secrets.baseline</code> if necessary (carefully!)</p>"},{"location":"contributing/#development-tips","title":"Development Tips","text":""},{"location":"contributing/#running-specific-tests","title":"Running Specific Tests","text":"<pre><code># Run specific test file\npytest tests/unit/test_config_loader.py -v\n\n# Run specific test function\npytest tests/unit/test_config_loader.py::test_load_agent_yaml -v\n\n# Run tests matching pattern\npytest -k \"validation\" -v\n</code></pre>"},{"location":"contributing/#debugging","title":"Debugging","text":"<p>Enable verbose output:</p> <pre><code>pytest -vv --tb=long tests/unit/test_config_loader.py\n</code></pre> <p>Use Python debugger:</p> <pre><code>pytest --pdb tests/unit/test_config_loader.py\n</code></pre>"},{"location":"contributing/#local-documentation","title":"Local Documentation","text":"<p>Build and serve documentation locally:</p> <pre><code>mkdocs serve\n</code></pre> <p>Visit <code>http://localhost:8000</code> to view.</p>"},{"location":"contributing/#questions","title":"Questions?","text":"<ul> <li>Issues: Open a GitHub issue with details</li> <li>Discussions: Use GitHub Discussions for questions</li> <li>Documentation: Check <code>docs/</code> for answers</li> <li>Code examples: See <code>docs/examples/</code> for configuration examples</li> </ul>"},{"location":"contributing/#thank-you","title":"Thank You","text":"<p>Thank you for contributing to HoloDeck! Your efforts help make this project better for everyone.</p>"},{"location":"api/config-loader/","title":"ConfigLoader API Reference","text":""},{"location":"api/config-loader/#configloader","title":"ConfigLoader","text":""},{"location":"api/config-loader/#holodeck.config.loader.ConfigLoader","title":"<code>ConfigLoader()</code>","text":"<p>Loads and validates agent configuration from YAML files.</p> <p>This class handles: - Parsing YAML files into Python dictionaries - Loading global configuration from ~/.holodeck/config.yaml - Merging configurations with proper precedence - Resolving file references (instructions, tools) - Converting validation errors into human-readable messages - Environment variable substitution</p> <p>Initialize the ConfigLoader.</p> Source code in <code>src/holodeck/config/loader.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the ConfigLoader.\"\"\"\n    pass\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.loader.ConfigLoader.load_agent_yaml","title":"<code>load_agent_yaml(file_path)</code>","text":"<p>Load and validate an agent configuration from YAML.</p> <p>This method: 1. Parses the YAML file 2. Applies environment variable substitution 3. Merges with global configuration if available 4. Validates against Agent schema 5. Returns an Agent instance</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to agent.yaml file</p> required <p>Returns:</p> Type Description <code>Agent</code> <p>Validated Agent instance</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If file doesn't exist</p> <code>ConfigError</code> <p>If YAML parsing fails</p> <code>ValidationError</code> <p>If configuration is invalid</p> Source code in <code>src/holodeck/config/loader.py</code> <pre><code>def load_agent_yaml(self, file_path: str) -&gt; Agent:\n    \"\"\"Load and validate an agent configuration from YAML.\n\n    This method:\n    1. Parses the YAML file\n    2. Applies environment variable substitution\n    3. Merges with global configuration if available\n    4. Validates against Agent schema\n    5. Returns an Agent instance\n\n    Args:\n        file_path: Path to agent.yaml file\n\n    Returns:\n        Validated Agent instance\n\n    Raises:\n        FileNotFoundError: If file doesn't exist\n        ConfigError: If YAML parsing fails\n        ValidationError: If configuration is invalid\n    \"\"\"\n    # Parse the agent YAML file\n    agent_yaml_content = self.parse_yaml(file_path)\n\n    # Apply environment variable substitution\n    yaml_str = yaml.dump(agent_yaml_content)\n    substituted_yaml = substitute_env_vars(yaml_str)\n    agent_config = yaml.safe_load(substituted_yaml)\n\n    # Load and merge global config\n    global_config = self.load_global_config()\n    merged_config = self.merge_configs(agent_config, global_config)\n\n    # Validate against Agent schema\n    try:\n        agent = Agent(**merged_config)\n        return agent\n    except PydanticValidationError as e:\n        # Convert Pydantic errors to human-readable messages\n        error_messages = flatten_pydantic_errors(e)\n        error_text = \"\\n\".join(error_messages)\n        raise ConfigError(\n            \"agent_validation\",\n            f\"Invalid agent configuration in {file_path}:\\n{error_text}\",\n        ) from e\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.loader.ConfigLoader.load_global_config","title":"<code>load_global_config()</code>","text":"<p>Load global configuration from ~/.holodeck/config.yaml.</p> <p>Returns:</p> Type Description <code>GlobalConfig | None</code> <p>GlobalConfig instance containing global configuration, or None if</p> <code>GlobalConfig | None</code> <p>file doesn't exist or is empty</p> <p>Raises:</p> Type Description <code>ConfigError</code> <p>If YAML parsing fails or validation fails</p> Source code in <code>src/holodeck/config/loader.py</code> <pre><code>def load_global_config(self) -&gt; GlobalConfig | None:\n    \"\"\"Load global configuration from ~/.holodeck/config.yaml.\n\n    Returns:\n        GlobalConfig instance containing global configuration, or None if\n        file doesn't exist or is empty\n\n    Raises:\n        ConfigError: If YAML parsing fails or validation fails\n    \"\"\"\n    home_dir = Path.home()\n    global_config_path = home_dir / \".holodeck\" / \"config.yaml\"\n\n    if not global_config_path.exists():\n        return None\n\n    try:\n        with open(global_config_path, encoding=\"utf-8\") as f:\n            content = yaml.safe_load(f)\n            if content is None:\n                return None\n\n            # Apply environment variable substitution to global config\n            config_str = yaml.dump(content)\n            substituted = substitute_env_vars(config_str)\n            config_dict = yaml.safe_load(substituted)\n\n            if not config_dict:\n                return None\n\n            # Validate and create GlobalConfig instance\n            try:\n                return GlobalConfig(**config_dict)\n            except PydanticValidationError as e:\n                error_messages = flatten_pydantic_errors(e)\n                error_text = \"\\n\".join(error_messages)\n                raise ConfigError(\n                    \"global_config_validation\",\n                    f\"Invalid global configuration in \"\n                    f\"{global_config_path}:\\n{error_text}\",\n                ) from e\n    except yaml.YAMLError as e:\n        raise ConfigError(\n            \"global_config_parse\",\n            f\"Failed to parse global config at {global_config_path}: {str(e)}\",\n        ) from e\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.loader.ConfigLoader.load_instructions","title":"<code>load_instructions(agent_yaml_path, agent)</code>","text":"<p>Load instruction content from file or return inline content.</p> <p>Parameters:</p> Name Type Description Default <code>agent_yaml_path</code> <code>str</code> <p>Path to the agent.yaml file</p> required <code>agent</code> <code>Agent</code> <p>Agent instance with instructions</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>Instruction content string, or None if not defined</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If instruction file doesn't exist</p> Source code in <code>src/holodeck/config/loader.py</code> <pre><code>def load_instructions(self, agent_yaml_path: str, agent: Agent) -&gt; str | None:\n    \"\"\"Load instruction content from file or return inline content.\n\n    Args:\n        agent_yaml_path: Path to the agent.yaml file\n        agent: Agent instance with instructions\n\n    Returns:\n        Instruction content string, or None if not defined\n\n    Raises:\n        FileNotFoundError: If instruction file doesn't exist\n    \"\"\"\n    if agent.instructions.inline:\n        return agent.instructions.inline\n\n    if agent.instructions.file:\n        base_dir = str(Path(agent_yaml_path).parent)\n        file_path = self.resolve_file_path(agent.instructions.file, base_dir)\n        with open(file_path, encoding=\"utf-8\") as f:\n            return f.read()\n\n    return None\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.loader.ConfigLoader.merge_configs","title":"<code>merge_configs(agent_config, global_config)</code>","text":"<p>Merge agent config with global config using proper precedence.</p> <p>Precedence (highest to lowest): 1. agent.yaml explicit settings 2. Environment variables (already substituted) 3. ~/.holodeck/config.yaml global settings</p> <p>Parameters:</p> Name Type Description Default <code>agent_config</code> <code>dict[str, Any]</code> <p>Configuration from agent.yaml</p> required <code>global_config</code> <code>GlobalConfig | None</code> <p>GlobalConfig instance from ~/.holodeck/config.yaml</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Merged configuration dictionary</p> Source code in <code>src/holodeck/config/loader.py</code> <pre><code>def merge_configs(\n    self, agent_config: dict[str, Any], global_config: GlobalConfig | None\n) -&gt; dict[str, Any]:\n    \"\"\"Merge agent config with global config using proper precedence.\n\n    Precedence (highest to lowest):\n    1. agent.yaml explicit settings\n    2. Environment variables (already substituted)\n    3. ~/.holodeck/config.yaml global settings\n\n    Args:\n        agent_config: Configuration from agent.yaml\n        global_config: GlobalConfig instance from ~/.holodeck/config.yaml\n\n    Returns:\n        Merged configuration dictionary\n    \"\"\"\n    # For now, agent config is the primary source\n    # Global config is kept separate as it may contain provider configs\n    # and other infrastructure settings not directly used by Agent model\n    # The merging of global settings would happen at a higher level\n    # when actually using the agent (e.g., for LLM provider setup)\n\n    # Return agent config as-is (it's validated and complete)\n    # Global config would be used separately for system configuration\n    return agent_config if agent_config else {}\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.loader.ConfigLoader.parse_yaml","title":"<code>parse_yaml(file_path)</code>","text":"<p>Parse a YAML file and return its contents as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to the YAML file to parse</p> required <p>Returns:</p> Type Description <code>dict[str, Any] | None</code> <p>Dictionary containing parsed YAML content, or None if file is empty</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the file does not exist</p> <code>ConfigError</code> <p>If YAML parsing fails</p> Source code in <code>src/holodeck/config/loader.py</code> <pre><code>def parse_yaml(self, file_path: str) -&gt; dict[str, Any] | None:\n    \"\"\"Parse a YAML file and return its contents as a dictionary.\n\n    Args:\n        file_path: Path to the YAML file to parse\n\n    Returns:\n        Dictionary containing parsed YAML content, or None if file is empty\n\n    Raises:\n        FileNotFoundError: If the file does not exist\n        ConfigError: If YAML parsing fails\n    \"\"\"\n    path = Path(file_path)\n\n    # Check if file exists\n    if not path.exists():\n        raise FileNotFoundError(\n            file_path,\n            f\"Configuration file not found at {file_path}. \"\n            f\"Please ensure the file exists at this path.\",\n        )\n\n    try:\n        with open(path, encoding=\"utf-8\") as f:\n            content = yaml.safe_load(f)\n            return content if content is not None else {}\n    except yaml.YAMLError as e:\n        raise ConfigError(\n            \"yaml_parse\",\n            f\"Failed to parse YAML file {file_path}: {str(e)}\",\n        ) from e\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.loader.ConfigLoader.resolve_file_path","title":"<code>resolve_file_path(file_path, base_dir)</code>","text":"<p>Resolve a file path relative to base directory.</p> <p>This method handles: - Absolute paths: returned as-is - Relative paths: resolved relative to base_dir - File existence verification</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to resolve (absolute or relative)</p> required <code>base_dir</code> <code>str</code> <p>Base directory for relative path resolution</p> required <p>Returns:</p> Type Description <code>str</code> <p>Absolute path to the file</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the resolved file doesn't exist</p> Source code in <code>src/holodeck/config/loader.py</code> <pre><code>def resolve_file_path(self, file_path: str, base_dir: str) -&gt; str:\n    \"\"\"Resolve a file path relative to base directory.\n\n    This method handles:\n    - Absolute paths: returned as-is\n    - Relative paths: resolved relative to base_dir\n    - File existence verification\n\n    Args:\n        file_path: Path to resolve (absolute or relative)\n        base_dir: Base directory for relative path resolution\n\n    Returns:\n        Absolute path to the file\n\n    Raises:\n        FileNotFoundError: If the resolved file doesn't exist\n    \"\"\"\n    path = Path(file_path)\n\n    # If path is absolute, use it directly\n    if path.is_absolute():\n        resolved = path\n    else:\n        # Resolve relative to base directory\n        resolved = (Path(base_dir) / file_path).resolve()\n\n    # Verify file exists\n    if not resolved.exists():\n        raise FileNotFoundError(\n            str(resolved),\n            f\"Referenced file not found: {resolved}\\n\"\n            f\"Please ensure the file exists at this path.\",\n        )\n\n    return str(resolved)\n</code></pre>"},{"location":"api/config-loader/#environment-variable-utilities","title":"Environment Variable Utilities","text":""},{"location":"api/config-loader/#holodeck.config.env_loader.substitute_env_vars","title":"<code>substitute_env_vars(text)</code>","text":"<p>Substitute environment variables in text using ${VAR_NAME} pattern.</p> <p>Replaces all occurrences of ${VAR_NAME} with the corresponding environment variable value. Raises ConfigError if a referenced variable does not exist.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text potentially containing ${VAR_NAME} patterns</p> required <p>Returns:</p> Type Description <code>str</code> <p>Text with all environment variables substituted</p> <p>Raises:</p> Type Description <code>ConfigError</code> <p>If a referenced environment variable does not exist</p> Example <p>import os os.environ[\"API_KEY\"] = \"secret123\" substitute_env_vars(\"key: ${API_KEY}\") 'key: secret123'</p> Source code in <code>src/holodeck/config/env_loader.py</code> <pre><code>def substitute_env_vars(text: str) -&gt; str:\n    \"\"\"Substitute environment variables in text using ${VAR_NAME} pattern.\n\n    Replaces all occurrences of ${VAR_NAME} with the corresponding environment\n    variable value. Raises ConfigError if a referenced variable does not exist.\n\n    Args:\n        text: Text potentially containing ${VAR_NAME} patterns\n\n    Returns:\n        Text with all environment variables substituted\n\n    Raises:\n        ConfigError: If a referenced environment variable does not exist\n\n    Example:\n        &gt;&gt;&gt; import os\n        &gt;&gt;&gt; os.environ[\"API_KEY\"] = \"secret123\"\n        &gt;&gt;&gt; substitute_env_vars(\"key: ${API_KEY}\")\n        'key: secret123'\n    \"\"\"\n    # Pattern to match ${VAR_NAME} - captures alphanumeric, underscore\n    pattern = r\"\\$\\{([A-Za-z_][A-Za-z0-9_]*)\\}\"\n\n    def replace_var(match: re.Match[str]) -&gt; str:\n        \"\"\"Replace a single ${VAR_NAME} pattern with env value.\n\n        Args:\n            match: Regex match object for ${VAR_NAME}\n\n        Returns:\n            Environment variable value\n\n        Raises:\n            ConfigError: If variable does not exist\n        \"\"\"\n        var_name = match.group(1)\n        if var_name not in os.environ:\n            raise ConfigError(\n                var_name,\n                f\"Environment variable '{var_name}' not found. \"\n                f\"Please set it and try again.\",\n            )\n        return os.environ[var_name]\n\n    return re.sub(pattern, replace_var, text)\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.env_loader.get_env_var","title":"<code>get_env_var(key, default=None)</code>","text":"<p>Get environment variable with optional default.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Environment variable name</p> required <code>default</code> <code>Any</code> <p>Default value if variable not set</p> <code>None</code> <p>Returns:</p> Type Description <code>Any</code> <p>Environment variable value or default</p> Source code in <code>src/holodeck/config/env_loader.py</code> <pre><code>def get_env_var(key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get environment variable with optional default.\n\n    Args:\n        key: Environment variable name\n        default: Default value if variable not set\n\n    Returns:\n        Environment variable value or default\n    \"\"\"\n    return os.environ.get(key, default)\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.env_loader.load_env_file","title":"<code>load_env_file(path)</code>","text":"<p>Load environment variables from a .env file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to .env file</p> required <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>Dictionary of loaded environment variables</p> <p>Raises:</p> Type Description <code>ConfigError</code> <p>If file cannot be read</p> Source code in <code>src/holodeck/config/env_loader.py</code> <pre><code>def load_env_file(path: str) -&gt; dict[str, str]:\n    \"\"\"Load environment variables from a .env file.\n\n    Args:\n        path: Path to .env file\n\n    Returns:\n        Dictionary of loaded environment variables\n\n    Raises:\n        ConfigError: If file cannot be read\n    \"\"\"\n    try:\n        env_vars = {}\n        with open(path) as f:\n            for line in f:\n                line = line.strip()\n                if not line or line.startswith(\"#\"):\n                    continue\n                if \"=\" in line:\n                    key, value = line.split(\"=\", 1)\n                    env_vars[key.strip()] = value.strip()\n        return env_vars\n    except OSError as e:\n        raise ConfigError(\"env_file\", f\"Cannot read environment file: {e}\") from e\n</code></pre>"},{"location":"api/config-loader/#validation-utilities","title":"Validation Utilities","text":""},{"location":"api/config-loader/#holodeck.config.validator.normalize_errors","title":"<code>normalize_errors(errors)</code>","text":"<p>Convert raw error messages to human-readable format.</p> <p>Processes error messages to be more user-friendly and actionable, removing technical jargon where possible.</p> <p>Parameters:</p> Name Type Description Default <code>errors</code> <code>list[str]</code> <p>List of error message strings</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>List of normalized, human-readable error messages</p> Source code in <code>src/holodeck/config/validator.py</code> <pre><code>def normalize_errors(errors: list[str]) -&gt; list[str]:\n    \"\"\"Convert raw error messages to human-readable format.\n\n    Processes error messages to be more user-friendly and actionable,\n    removing technical jargon where possible.\n\n    Args:\n        errors: List of error message strings\n\n    Returns:\n        List of normalized, human-readable error messages\n    \"\"\"\n    normalized: list[str] = []\n\n    for error in errors:\n        # Remove common technical prefixes\n        msg = error\n        if msg.startswith(\"value_error\"):\n            msg = msg.replace(\"value_error\", \"\").strip()\n        if msg.startswith(\"type_error\"):\n            msg = msg.replace(\"type_error\", \"\").strip()\n\n        # Improve message readability\n        if msg:\n            normalized.append(msg)\n\n    return normalized if normalized else [\"An unknown validation error occurred\"]\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.validator.flatten_pydantic_errors","title":"<code>flatten_pydantic_errors(exc)</code>","text":"<p>Flatten Pydantic ValidationError into human-readable messages.</p> <p>Converts Pydantic's nested error structure into a flat list of user-friendly error messages that include field names and descriptions.</p> <p>Parameters:</p> Name Type Description Default <code>exc</code> <code>ValidationError</code> <p>Pydantic ValidationError exception</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>List of human-readable error messages, one per field error</p> Example <p>from pydantic import BaseModel, ValidationError class Model(BaseModel): ...     name: str try: ...     Model(name=123) ... except ValidationError as e: ...     msgs = flatten_pydantic_errors(e) ...     # msgs contains human-readable descriptions</p> Source code in <code>src/holodeck/config/validator.py</code> <pre><code>def flatten_pydantic_errors(exc: PydanticValidationError) -&gt; list[str]:\n    \"\"\"Flatten Pydantic ValidationError into human-readable messages.\n\n    Converts Pydantic's nested error structure into a flat list of\n    user-friendly error messages that include field names and descriptions.\n\n    Args:\n        exc: Pydantic ValidationError exception\n\n    Returns:\n        List of human-readable error messages, one per field error\n\n    Example:\n        &gt;&gt;&gt; from pydantic import BaseModel, ValidationError\n        &gt;&gt;&gt; class Model(BaseModel):\n        ...     name: str\n        &gt;&gt;&gt; try:\n        ...     Model(name=123)\n        ... except ValidationError as e:\n        ...     msgs = flatten_pydantic_errors(e)\n        ...     # msgs contains human-readable descriptions\n    \"\"\"\n    errors: list[str] = []\n\n    for error in exc.errors():\n        # Extract location (field path)\n        loc = error.get(\"loc\", ())\n        field_path = \".\".join(str(item) for item in loc) if loc else \"unknown\"\n\n        # Extract error message\n        msg = error.get(\"msg\", \"Unknown error\")\n        error_type = error.get(\"type\", \"\")\n\n        # Format the error message\n        if error_type == \"value_error\":\n            # For value errors, include what was provided\n            input_val = error.get(\"input\")\n            formatted = f\"Field '{field_path}': {msg} (received: {input_val!r})\"\n        else:\n            formatted = f\"Field '{field_path}': {msg}\"\n\n        errors.append(formatted)\n\n    return errors if errors else [\"Validation failed with unknown error\"]\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.validator.validate_field_exists","title":"<code>validate_field_exists(data, field, field_type)</code>","text":"<p>Validate that a required field exists and has correct type.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>Dictionary to validate</p> required <code>field</code> <code>str</code> <p>Field name to check</p> required <code>field_type</code> <code>type</code> <p>Expected type for the field</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If field is missing or has wrong type</p> Source code in <code>src/holodeck/config/validator.py</code> <pre><code>def validate_field_exists(data: dict[str, Any], field: str, field_type: type) -&gt; None:\n    \"\"\"Validate that a required field exists and has correct type.\n\n    Args:\n        data: Dictionary to validate\n        field: Field name to check\n        field_type: Expected type for the field\n\n    Raises:\n        ValueError: If field is missing or has wrong type\n    \"\"\"\n    if field not in data:\n        raise ValueError(f\"Required field '{field}' is missing\")\n    if not isinstance(data[field], field_type):\n        raise ValueError(\n            f\"Field '{field}' must be {field_type.__name__}, \"\n            f\"got {type(data[field]).__name__}\"\n        )\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.validator.validate_mutually_exclusive","title":"<code>validate_mutually_exclusive(data, fields)</code>","text":"<p>Validate that exactly one of the given fields is present.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>Dictionary to validate</p> required <code>fields</code> <code>list[str]</code> <p>List of mutually exclusive field names</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If not exactly one field is present</p> Source code in <code>src/holodeck/config/validator.py</code> <pre><code>def validate_mutually_exclusive(data: dict[str, Any], fields: list[str]) -&gt; None:\n    \"\"\"Validate that exactly one of the given fields is present.\n\n    Args:\n        data: Dictionary to validate\n        fields: List of mutually exclusive field names\n\n    Raises:\n        ValueError: If not exactly one field is present\n    \"\"\"\n    present = [f for f in fields if f in data and data[f] is not None]\n    if len(present) == 0:\n        raise ValueError(f\"Exactly one of {fields} must be provided\")\n    if len(present) &gt; 1:\n        raise ValueError(f\"Only one of {fields} can be provided, got {present}\")\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.validator.validate_range","title":"<code>validate_range(value, min_val, max_val, name='value')</code>","text":"<p>Validate that a numeric value is within a range.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>Value to validate</p> required <code>min_val</code> <code>float</code> <p>Minimum allowed value (inclusive)</p> required <code>max_val</code> <code>float</code> <p>Maximum allowed value (inclusive)</p> required <code>name</code> <code>str</code> <p>Name of the field for error messages</p> <code>'value'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If value is outside the range</p> Source code in <code>src/holodeck/config/validator.py</code> <pre><code>def validate_range(\n    value: float, min_val: float, max_val: float, name: str = \"value\"\n) -&gt; None:\n    \"\"\"Validate that a numeric value is within a range.\n\n    Args:\n        value: Value to validate\n        min_val: Minimum allowed value (inclusive)\n        max_val: Maximum allowed value (inclusive)\n        name: Name of the field for error messages\n\n    Raises:\n        ValueError: If value is outside the range\n    \"\"\"\n    if not (min_val &lt;= value &lt;= max_val):\n        raise ValueError(f\"{name} must be between {min_val} and {max_val}, got {value}\")\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.validator.validate_enum","title":"<code>validate_enum(value, allowed, name='value')</code>","text":"<p>Validate that a string is one of allowed values.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>Value to validate</p> required <code>allowed</code> <code>list[str]</code> <p>List of allowed values</p> required <code>name</code> <code>str</code> <p>Name of the field for error messages</p> <code>'value'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If value is not in allowed list</p> Source code in <code>src/holodeck/config/validator.py</code> <pre><code>def validate_enum(value: str, allowed: list[str], name: str = \"value\") -&gt; None:\n    \"\"\"Validate that a string is one of allowed values.\n\n    Args:\n        value: Value to validate\n        allowed: List of allowed values\n        name: Name of the field for error messages\n\n    Raises:\n        ValueError: If value is not in allowed list\n    \"\"\"\n    if value not in allowed:\n        raise ValueError(f\"{name} must be one of {allowed}, got '{value}'\")\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.validator.validate_path_exists","title":"<code>validate_path_exists(path, description='file')</code>","text":"<p>Validate that a file or directory exists.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to validate</p> required <code>description</code> <code>str</code> <p>Description of path for error messages</p> <code>'file'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If path does not exist</p> Source code in <code>src/holodeck/config/validator.py</code> <pre><code>def validate_path_exists(path: str, description: str = \"file\") -&gt; None:\n    \"\"\"Validate that a file or directory exists.\n\n    Args:\n        path: Path to validate\n        description: Description of path for error messages\n\n    Raises:\n        ValueError: If path does not exist\n    \"\"\"\n    from pathlib import Path\n\n    if not Path(path).exists():\n        raise ValueError(f\"Path does not exist: {path}\")\n</code></pre>"},{"location":"api/config-loader/#default-configuration","title":"Default Configuration","text":""},{"location":"api/config-loader/#holodeck.config.defaults.get_default_model_config","title":"<code>get_default_model_config(provider='openai')</code>","text":"<p>Get default model configuration for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>LLM provider name (openai, azure_openai, anthropic)</p> <code>'openai'</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with default model configuration</p> Source code in <code>src/holodeck/config/defaults.py</code> <pre><code>def get_default_model_config(provider: str = \"openai\") -&gt; dict[str, Any]:\n    \"\"\"Get default model configuration for a provider.\n\n    Args:\n        provider: LLM provider name (openai, azure_openai, anthropic)\n\n    Returns:\n        Dictionary with default model configuration\n    \"\"\"\n    defaults = {\n        \"openai\": {\n            \"provider\": \"openai\",\n            \"name\": \"gpt-4o-mini\",\n            \"temperature\": 0.7,\n            \"max_tokens\": 2048,\n        },\n        \"azure_openai\": {\n            \"provider\": \"azure_openai\",\n            \"name\": \"gpt-4o\",\n            \"temperature\": 0.7,\n            \"max_tokens\": 2048,\n        },\n        \"anthropic\": {\n            \"provider\": \"anthropic\",\n            \"name\": \"claude-3-haiku-20240307\",\n            \"temperature\": 0.7,\n            \"max_tokens\": 2048,\n        },\n    }\n    return defaults.get(provider, defaults[\"openai\"])\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.defaults.get_default_tool_config","title":"<code>get_default_tool_config(tool_type=None)</code>","text":"<p>Get default configuration template for a tool type.</p> <p>Parameters:</p> Name Type Description Default <code>tool_type</code> <code>str | None</code> <p>Tool type (vectorstore, function, mcp, prompt). If None, returns generic.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with default tool configuration</p> Source code in <code>src/holodeck/config/defaults.py</code> <pre><code>def get_default_tool_config(tool_type: str | None = None) -&gt; dict[str, Any]:\n    \"\"\"Get default configuration template for a tool type.\n\n    Args:\n        tool_type: Tool type (vectorstore, function, mcp, prompt).\n            If None, returns generic.\n\n    Returns:\n        Dictionary with default tool configuration\n    \"\"\"\n    if tool_type is None:\n        return {\"type\": \"function\"}\n\n    defaults: dict[str, dict[str, Any]] = {\n        \"vectorstore\": {\n            \"type\": \"vectorstore\",\n            \"source\": \"\",\n            \"embedding_model\": \"text-embedding-3-small\",\n        },\n        \"function\": {\n            \"type\": \"function\",\n            \"file\": \"\",\n            \"function\": \"\",\n        },\n        \"mcp\": {\n            \"type\": \"mcp\",\n            \"server\": \"\",\n        },\n        \"prompt\": {\n            \"type\": \"prompt\",\n            \"template\": \"\",\n            \"parameters\": {},\n        },\n    }\n    return defaults.get(tool_type, {})\n</code></pre>"},{"location":"api/config-loader/#holodeck.config.defaults.get_default_evaluation_config","title":"<code>get_default_evaluation_config(metric_name=None)</code>","text":"<p>Get default evaluation configuration.</p> <p>Parameters:</p> Name Type Description Default <code>metric_name</code> <code>str | None</code> <p>Specific metric name. If None, returns generic structure.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with default evaluation configuration</p> Source code in <code>src/holodeck/config/defaults.py</code> <pre><code>def get_default_evaluation_config(metric_name: str | None = None) -&gt; dict[str, Any]:\n    \"\"\"Get default evaluation configuration.\n\n    Args:\n        metric_name: Specific metric name. If None, returns generic structure.\n\n    Returns:\n        Dictionary with default evaluation configuration\n    \"\"\"\n    # Default per-metric configs\n    metric_defaults = {\n        \"groundedness\": {\n            \"metric\": \"groundedness\",\n            \"threshold\": 4.0,\n            \"enabled\": True,\n            \"scale\": 5,\n        },\n        \"relevance\": {\n            \"metric\": \"relevance\",\n            \"threshold\": 4.0,\n            \"enabled\": True,\n            \"scale\": 5,\n        },\n        \"coherence\": {\n            \"metric\": \"coherence\",\n            \"threshold\": 3.5,\n            \"enabled\": True,\n            \"scale\": 5,\n        },\n        \"safety\": {\n            \"metric\": \"safety\",\n            \"threshold\": 4.0,\n            \"enabled\": True,\n            \"scale\": 5,\n        },\n        \"f1_score\": {\n            \"metric\": \"f1_score\",\n            \"threshold\": 0.85,\n            \"enabled\": True,\n        },\n        \"bleu\": {\n            \"metric\": \"bleu\",\n            \"threshold\": 0.7,\n            \"enabled\": True,\n        },\n        \"rouge\": {\n            \"metric\": \"rouge\",\n            \"threshold\": 0.7,\n            \"enabled\": True,\n        },\n    }\n    if metric_name is None:\n        return {\n            \"metrics\": [\n                {\"metric\": \"groundedness\", \"threshold\": 4.0},\n                {\"metric\": \"relevance\", \"threshold\": 4.0},\n            ]\n        }\n    return metric_defaults.get(metric_name, {})\n</code></pre>"},{"location":"api/models/","title":"Data Models API Reference","text":""},{"location":"api/models/#agent-models","title":"Agent Models","text":""},{"location":"api/models/#holodeck.models.agent.Agent","title":"<code>Agent</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Agent configuration entity.</p> <p>Root configuration for a single AI agent instance, defining model, instructions, tools, evaluations, and test cases.</p>"},{"location":"api/models/#holodeck.models.agent.Agent.validate_author","title":"<code>validate_author(v)</code>  <code>classmethod</code>","text":"<p>Validate author is not empty if provided.</p> Source code in <code>src/holodeck/models/agent.py</code> <pre><code>@field_validator(\"author\")\n@classmethod\ndef validate_author(cls, v: str | None) -&gt; str | None:\n    \"\"\"Validate author is not empty if provided.\"\"\"\n    if v is not None and (not v or not v.strip()):\n        raise ValueError(\"author must be non-empty if provided\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.agent.Agent.validate_description","title":"<code>validate_description(v)</code>  <code>classmethod</code>","text":"<p>Validate description is not empty if provided.</p> Source code in <code>src/holodeck/models/agent.py</code> <pre><code>@field_validator(\"description\")\n@classmethod\ndef validate_description(cls, v: str | None) -&gt; str | None:\n    \"\"\"Validate description is not empty if provided.\"\"\"\n    if v is not None and (not v or not v.strip()):\n        raise ValueError(\"description must be non-empty if provided\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.agent.Agent.validate_name","title":"<code>validate_name(v)</code>  <code>classmethod</code>","text":"<p>Validate name is not empty.</p> Source code in <code>src/holodeck/models/agent.py</code> <pre><code>@field_validator(\"name\")\n@classmethod\ndef validate_name(cls, v: str) -&gt; str:\n    \"\"\"Validate name is not empty.\"\"\"\n    if not v or not v.strip():\n        raise ValueError(\"name must be a non-empty string\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.agent.Agent.validate_test_cases","title":"<code>validate_test_cases(v)</code>  <code>classmethod</code>","text":"<p>Validate test cases list.</p> Source code in <code>src/holodeck/models/agent.py</code> <pre><code>@field_validator(\"test_cases\")\n@classmethod\ndef validate_test_cases(\n    cls, v: list[TestCaseModel] | None\n) -&gt; list[TestCaseModel] | None:\n    \"\"\"Validate test cases list.\"\"\"\n    if v is not None and len(v) &gt; 100:\n        raise ValueError(\"Maximum 100 test cases per agent\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.agent.Agent.validate_tools","title":"<code>validate_tools(v)</code>  <code>classmethod</code>","text":"<p>Validate tools list.</p> Source code in <code>src/holodeck/models/agent.py</code> <pre><code>@field_validator(\"tools\")\n@classmethod\ndef validate_tools(cls, v: list[Any] | None) -&gt; list[Any] | None:\n    \"\"\"Validate tools list.\"\"\"\n    if v is not None and len(v) &gt; 50:\n        raise ValueError(\"Maximum 50 tools per agent\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.agent.Instructions","title":"<code>Instructions</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>System instructions specification (file or inline).</p> <p>Represents the system prompt for an agent, supporting both file references and inline text.</p>"},{"location":"api/models/#holodeck.models.agent.Instructions.model_post_init","title":"<code>model_post_init(__context)</code>","text":"<p>Validate file and inline mutual exclusivity.</p> Source code in <code>src/holodeck/models/agent.py</code> <pre><code>def model_post_init(self, __context: Any) -&gt; None:\n    \"\"\"Validate file and inline mutual exclusivity.\"\"\"\n    if self.file and self.inline:\n        raise ValueError(\"Cannot provide both 'file' and 'inline'\")\n    if not self.file and not self.inline:\n        raise ValueError(\"Must provide either 'file' or 'inline'\")\n</code></pre>"},{"location":"api/models/#holodeck.models.agent.Instructions.validate_file","title":"<code>validate_file(v)</code>  <code>classmethod</code>","text":"<p>Validate file is not empty if provided.</p> Source code in <code>src/holodeck/models/agent.py</code> <pre><code>@field_validator(\"file\")\n@classmethod\ndef validate_file(cls, v: str | None) -&gt; str | None:\n    \"\"\"Validate file is not empty if provided.\"\"\"\n    if v is not None and (not v or not v.strip()):\n        raise ValueError(\"file must be non-empty if provided\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.agent.Instructions.validate_inline","title":"<code>validate_inline(v)</code>  <code>classmethod</code>","text":"<p>Validate inline is not empty if provided.</p> Source code in <code>src/holodeck/models/agent.py</code> <pre><code>@field_validator(\"inline\")\n@classmethod\ndef validate_inline(cls, v: str | None) -&gt; str | None:\n    \"\"\"Validate inline is not empty if provided.\"\"\"\n    if v is not None and (not v or not v.strip()):\n        raise ValueError(\"inline must be non-empty if provided\")\n    return v\n</code></pre>"},{"location":"api/models/#llm-provider-models","title":"LLM Provider Models","text":""},{"location":"api/models/#holodeck.models.llm.ProviderEnum","title":"<code>ProviderEnum</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Supported LLM providers.</p>"},{"location":"api/models/#holodeck.models.llm.LLMProvider","title":"<code>LLMProvider</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>LLM provider configuration.</p> <p>Specifies which LLM provider and model to use, along with model parameters.</p>"},{"location":"api/models/#holodeck.models.llm.LLMProvider.check_endpoint_required","title":"<code>check_endpoint_required()</code>","text":"<p>Validate endpoint is provided for Azure OpenAI and Ollama.</p> Source code in <code>src/holodeck/models/llm.py</code> <pre><code>@model_validator(mode=\"after\")\ndef check_endpoint_required(self) -&gt; \"LLMProvider\":\n    \"\"\"Validate endpoint is provided for Azure OpenAI and Ollama.\"\"\"\n    if self.provider in (ProviderEnum.AZURE_OPENAI, ProviderEnum.OLLAMA) and (\n        not self.endpoint or not self.endpoint.strip()\n    ):\n        raise ValueError(f\"endpoint is required for {self.provider.value} provider\")\n    return self\n</code></pre>"},{"location":"api/models/#holodeck.models.llm.LLMProvider.validate_max_tokens","title":"<code>validate_max_tokens(v)</code>  <code>classmethod</code>","text":"<p>Validate max_tokens is positive.</p> Source code in <code>src/holodeck/models/llm.py</code> <pre><code>@field_validator(\"max_tokens\")\n@classmethod\ndef validate_max_tokens(cls, v: int | None) -&gt; int | None:\n    \"\"\"Validate max_tokens is positive.\"\"\"\n    if v is not None and v &lt;= 0:\n        raise ValueError(\"max_tokens must be positive\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.llm.LLMProvider.validate_name","title":"<code>validate_name(v)</code>  <code>classmethod</code>","text":"<p>Validate name is not empty.</p> Source code in <code>src/holodeck/models/llm.py</code> <pre><code>@field_validator(\"name\")\n@classmethod\ndef validate_name(cls, v: str) -&gt; str:\n    \"\"\"Validate name is not empty.\"\"\"\n    if not v or not v.strip():\n        raise ValueError(\"name must be a non-empty string\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.llm.LLMProvider.validate_temperature","title":"<code>validate_temperature(v)</code>  <code>classmethod</code>","text":"<p>Validate temperature is in valid range.</p> Source code in <code>src/holodeck/models/llm.py</code> <pre><code>@field_validator(\"temperature\")\n@classmethod\ndef validate_temperature(cls, v: float | None) -&gt; float | None:\n    \"\"\"Validate temperature is in valid range.\"\"\"\n    if v is not None and (v &lt; 0.0 or v &gt; 2.0):\n        raise ValueError(\"temperature must be between 0.0 and 2.0\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.llm.LLMProvider.validate_top_p","title":"<code>validate_top_p(v)</code>  <code>classmethod</code>","text":"<p>Validate top_p is in valid range.</p> Source code in <code>src/holodeck/models/llm.py</code> <pre><code>@field_validator(\"top_p\")\n@classmethod\ndef validate_top_p(cls, v: float | None) -&gt; float | None:\n    \"\"\"Validate top_p is in valid range.\"\"\"\n    if v is not None and (v &lt; 0.0 or v &gt; 1.0):\n        raise ValueError(\"top_p must be between 0.0 and 1.0\")\n    return v\n</code></pre>"},{"location":"api/models/#tool-models","title":"Tool Models","text":""},{"location":"api/models/#holodeck.models.tool.Tool","title":"<code>Tool</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base tool model with discriminated union for subtypes.</p>"},{"location":"api/models/#holodeck.models.tool.VectorstoreTool","title":"<code>VectorstoreTool</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Vectorstore tool for semantic search over documents.</p>"},{"location":"api/models/#holodeck.models.tool.VectorstoreTool.validate_chunk_overlap","title":"<code>validate_chunk_overlap(v)</code>  <code>classmethod</code>","text":"<p>Validate chunk_overlap is non-negative if provided.</p> Source code in <code>src/holodeck/models/tool.py</code> <pre><code>@field_validator(\"chunk_overlap\")\n@classmethod\ndef validate_chunk_overlap(cls, v: int | None) -&gt; int | None:\n    \"\"\"Validate chunk_overlap is non-negative if provided.\"\"\"\n    if v is not None and v &lt; 0:\n        raise ValueError(\"chunk_overlap must be non-negative\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.tool.VectorstoreTool.validate_chunk_size","title":"<code>validate_chunk_size(v)</code>  <code>classmethod</code>","text":"<p>Validate chunk_size is positive if provided.</p> Source code in <code>src/holodeck/models/tool.py</code> <pre><code>@field_validator(\"chunk_size\")\n@classmethod\ndef validate_chunk_size(cls, v: int | None) -&gt; int | None:\n    \"\"\"Validate chunk_size is positive if provided.\"\"\"\n    if v is not None and v &lt;= 0:\n        raise ValueError(\"chunk_size must be positive\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.tool.VectorstoreTool.validate_source","title":"<code>validate_source(v)</code>  <code>classmethod</code>","text":"<p>Validate source is not empty.</p> Source code in <code>src/holodeck/models/tool.py</code> <pre><code>@field_validator(\"source\")\n@classmethod\ndef validate_source(cls, v: str) -&gt; str:\n    \"\"\"Validate source is not empty.\"\"\"\n    if not v or not v.strip():\n        raise ValueError(\"source must be a non-empty path\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.tool.FunctionTool","title":"<code>FunctionTool</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Function tool for calling Python functions.</p>"},{"location":"api/models/#holodeck.models.tool.FunctionTool.validate_file","title":"<code>validate_file(v)</code>  <code>classmethod</code>","text":"<p>Validate file is not empty.</p> Source code in <code>src/holodeck/models/tool.py</code> <pre><code>@field_validator(\"file\")\n@classmethod\ndef validate_file(cls, v: str) -&gt; str:\n    \"\"\"Validate file is not empty.\"\"\"\n    if not v or not v.strip():\n        raise ValueError(\"file must be a non-empty path\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.tool.FunctionTool.validate_function","title":"<code>validate_function(v)</code>  <code>classmethod</code>","text":"<p>Validate function is not empty.</p> Source code in <code>src/holodeck/models/tool.py</code> <pre><code>@field_validator(\"function\")\n@classmethod\ndef validate_function(cls, v: str) -&gt; str:\n    \"\"\"Validate function is not empty.\"\"\"\n    if not v or not v.strip():\n        raise ValueError(\"function must be a non-empty identifier\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.tool.MCPTool","title":"<code>MCPTool</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>MCP (Model Context Protocol) tool for standardized integrations.</p>"},{"location":"api/models/#holodeck.models.tool.MCPTool.validate_server","title":"<code>validate_server(v)</code>  <code>classmethod</code>","text":"<p>Validate server is not empty.</p> Source code in <code>src/holodeck/models/tool.py</code> <pre><code>@field_validator(\"server\")\n@classmethod\ndef validate_server(cls, v: str) -&gt; str:\n    \"\"\"Validate server is not empty.\"\"\"\n    if not v or not v.strip():\n        raise ValueError(\"server must be a non-empty identifier\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.tool.PromptTool","title":"<code>PromptTool</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Prompt-based tool for AI-powered semantic functions.</p>"},{"location":"api/models/#holodeck.models.tool.PromptTool.check_template_or_file","title":"<code>check_template_or_file(v, info)</code>  <code>classmethod</code>","text":"<p>Validate that exactly one of template or file is provided.</p> Source code in <code>src/holodeck/models/tool.py</code> <pre><code>@field_validator(\"parameters\", mode=\"before\")\n@classmethod\ndef check_template_or_file(cls, v: Any, info: Any) -&gt; Any:\n    \"\"\"Validate that exactly one of template or file is provided.\"\"\"\n    data = info.data\n    template = data.get(\"template\")\n    file_path = data.get(\"file\")\n\n    if not template and not file_path:\n        raise ValueError(\"Exactly one of 'template' or 'file' must be provided\")\n    if template and file_path:\n        raise ValueError(\"Cannot provide both 'template' and 'file'\")\n\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.tool.PromptTool.validate_file","title":"<code>validate_file(v)</code>  <code>classmethod</code>","text":"<p>Validate file is not empty if provided.</p> Source code in <code>src/holodeck/models/tool.py</code> <pre><code>@field_validator(\"file\")\n@classmethod\ndef validate_file(cls, v: str | None) -&gt; str | None:\n    \"\"\"Validate file is not empty if provided.\"\"\"\n    if v is not None and (not v or not v.strip()):\n        raise ValueError(\"file must be non-empty if provided\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.tool.PromptTool.validate_parameters","title":"<code>validate_parameters(v)</code>  <code>classmethod</code>","text":"<p>Validate parameters is not empty.</p> Source code in <code>src/holodeck/models/tool.py</code> <pre><code>@field_validator(\"parameters\")\n@classmethod\ndef validate_parameters(\n    cls, v: dict[str, dict[str, Any]]\n) -&gt; dict[str, dict[str, Any]]:\n    \"\"\"Validate parameters is not empty.\"\"\"\n    if not v:\n        raise ValueError(\"parameters must have at least one parameter\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.tool.PromptTool.validate_template","title":"<code>validate_template(v)</code>  <code>classmethod</code>","text":"<p>Validate template is not empty if provided.</p> Source code in <code>src/holodeck/models/tool.py</code> <pre><code>@field_validator(\"template\")\n@classmethod\ndef validate_template(cls, v: str | None) -&gt; str | None:\n    \"\"\"Validate template is not empty if provided.\"\"\"\n    if v is not None and (not v or not v.strip()):\n        raise ValueError(\"template must be non-empty if provided\")\n    return v\n</code></pre>"},{"location":"api/models/#evaluation-models","title":"Evaluation Models","text":""},{"location":"api/models/#holodeck.models.evaluation.EvaluationMetric","title":"<code>EvaluationMetric</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Evaluation metric configuration.</p> <p>Represents a single evaluation metric with flexible model configuration, including per-metric LLM model overrides.</p>"},{"location":"api/models/#holodeck.models.evaluation.EvaluationMetric.validate_custom_prompt","title":"<code>validate_custom_prompt(v)</code>  <code>classmethod</code>","text":"<p>Validate custom_prompt is not empty if provided.</p> Source code in <code>src/holodeck/models/evaluation.py</code> <pre><code>@field_validator(\"custom_prompt\")\n@classmethod\ndef validate_custom_prompt(cls, v: str | None) -&gt; str | None:\n    \"\"\"Validate custom_prompt is not empty if provided.\"\"\"\n    if v is not None and (not v or not v.strip()):\n        raise ValueError(\"custom_prompt must be non-empty if provided\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.evaluation.EvaluationMetric.validate_enabled","title":"<code>validate_enabled(v)</code>  <code>classmethod</code>","text":"<p>Validate enabled is boolean.</p> Source code in <code>src/holodeck/models/evaluation.py</code> <pre><code>@field_validator(\"enabled\")\n@classmethod\ndef validate_enabled(cls, v: bool) -&gt; bool:\n    \"\"\"Validate enabled is boolean.\"\"\"\n    if not isinstance(v, bool):\n        raise ValueError(\"enabled must be boolean\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.evaluation.EvaluationMetric.validate_fail_on_error","title":"<code>validate_fail_on_error(v)</code>  <code>classmethod</code>","text":"<p>Validate fail_on_error is boolean.</p> Source code in <code>src/holodeck/models/evaluation.py</code> <pre><code>@field_validator(\"fail_on_error\")\n@classmethod\ndef validate_fail_on_error(cls, v: bool) -&gt; bool:\n    \"\"\"Validate fail_on_error is boolean.\"\"\"\n    if not isinstance(v, bool):\n        raise ValueError(\"fail_on_error must be boolean\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.evaluation.EvaluationMetric.validate_metric","title":"<code>validate_metric(v)</code>  <code>classmethod</code>","text":"<p>Validate metric is not empty.</p> Source code in <code>src/holodeck/models/evaluation.py</code> <pre><code>@field_validator(\"metric\")\n@classmethod\ndef validate_metric(cls, v: str) -&gt; str:\n    \"\"\"Validate metric is not empty.\"\"\"\n    if not v or not v.strip():\n        raise ValueError(\"metric must be a non-empty string\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.evaluation.EvaluationMetric.validate_retry_on_failure","title":"<code>validate_retry_on_failure(v)</code>  <code>classmethod</code>","text":"<p>Validate retry_on_failure is in valid range.</p> Source code in <code>src/holodeck/models/evaluation.py</code> <pre><code>@field_validator(\"retry_on_failure\")\n@classmethod\ndef validate_retry_on_failure(cls, v: int | None) -&gt; int | None:\n    \"\"\"Validate retry_on_failure is in valid range.\"\"\"\n    if v is not None and (v &lt; 1 or v &gt; 3):\n        raise ValueError(\"retry_on_failure must be between 1 and 3\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.evaluation.EvaluationMetric.validate_scale","title":"<code>validate_scale(v)</code>  <code>classmethod</code>","text":"<p>Validate scale is positive.</p> Source code in <code>src/holodeck/models/evaluation.py</code> <pre><code>@field_validator(\"scale\")\n@classmethod\ndef validate_scale(cls, v: int | None) -&gt; int | None:\n    \"\"\"Validate scale is positive.\"\"\"\n    if v is not None and v &lt;= 0:\n        raise ValueError(\"scale must be positive\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.evaluation.EvaluationMetric.validate_threshold","title":"<code>validate_threshold(v)</code>  <code>classmethod</code>","text":"<p>Validate threshold is numeric if provided.</p> Source code in <code>src/holodeck/models/evaluation.py</code> <pre><code>@field_validator(\"threshold\")\n@classmethod\ndef validate_threshold(cls, v: float | None) -&gt; float | None:\n    \"\"\"Validate threshold is numeric if provided.\"\"\"\n    if v is not None and not isinstance(v, int | float):\n        raise ValueError(\"threshold must be numeric\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.evaluation.EvaluationMetric.validate_timeout_ms","title":"<code>validate_timeout_ms(v)</code>  <code>classmethod</code>","text":"<p>Validate timeout_ms is positive.</p> Source code in <code>src/holodeck/models/evaluation.py</code> <pre><code>@field_validator(\"timeout_ms\")\n@classmethod\ndef validate_timeout_ms(cls, v: int | None) -&gt; int | None:\n    \"\"\"Validate timeout_ms is positive.\"\"\"\n    if v is not None and v &lt;= 0:\n        raise ValueError(\"timeout_ms must be positive\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.evaluation.EvaluationConfig","title":"<code>EvaluationConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Evaluation framework configuration.</p> <p>Container for evaluation metrics with optional default model configuration.</p>"},{"location":"api/models/#holodeck.models.evaluation.EvaluationConfig.validate_metrics","title":"<code>validate_metrics(v)</code>  <code>classmethod</code>","text":"<p>Validate metrics list is not empty.</p> Source code in <code>src/holodeck/models/evaluation.py</code> <pre><code>@field_validator(\"metrics\")\n@classmethod\ndef validate_metrics(cls, v: list[EvaluationMetric]) -&gt; list[EvaluationMetric]:\n    \"\"\"Validate metrics list is not empty.\"\"\"\n    if not v:\n        raise ValueError(\"metrics must have at least one metric\")\n    return v\n</code></pre>"},{"location":"api/models/#test-case-models","title":"Test Case Models","text":""},{"location":"api/models/#holodeck.models.test_case.FileInput","title":"<code>FileInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>File input for multimodal test cases.</p> <p>Represents a single file reference for test case inputs, supporting both local files and remote URLs with optional extraction parameters.</p>"},{"location":"api/models/#holodeck.models.test_case.FileInput.check_path_or_url","title":"<code>check_path_or_url(v, info)</code>  <code>classmethod</code>","text":"<p>Validate that exactly one of path or url is provided.</p> Source code in <code>src/holodeck/models/test_case.py</code> <pre><code>@field_validator(\"path\", \"url\", mode=\"before\")\n@classmethod\ndef check_path_or_url(cls, v: Any, info: Any) -&gt; Any:\n    \"\"\"Validate that exactly one of path or url is provided.\"\"\"\n    # This runs before validation, so we check in root_validator\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.test_case.FileInput.model_post_init","title":"<code>model_post_init(__context)</code>","text":"<p>Validate path and url mutual exclusivity after initialization.</p> Source code in <code>src/holodeck/models/test_case.py</code> <pre><code>def model_post_init(self, __context: Any) -&gt; None:\n    \"\"\"Validate path and url mutual exclusivity after initialization.\"\"\"\n    if self.path and self.url:\n        raise ValueError(\"Cannot provide both 'path' and 'url'\")\n    if not self.path and not self.url:\n        raise ValueError(\"Must provide either 'path' or 'url'\")\n</code></pre>"},{"location":"api/models/#holodeck.models.test_case.FileInput.validate_pages","title":"<code>validate_pages(v)</code>  <code>classmethod</code>","text":"<p>Validate pages are positive integers.</p> Source code in <code>src/holodeck/models/test_case.py</code> <pre><code>@field_validator(\"pages\")\n@classmethod\ndef validate_pages(cls, v: list[int] | None) -&gt; list[int] | None:\n    \"\"\"Validate pages are positive integers.\"\"\"\n    if v is not None and not all(isinstance(p, int) and p &gt; 0 for p in v):\n        raise ValueError(\"pages must be positive integers\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.test_case.FileInput.validate_type","title":"<code>validate_type(v)</code>  <code>classmethod</code>","text":"<p>Validate file type is supported.</p> Source code in <code>src/holodeck/models/test_case.py</code> <pre><code>@field_validator(\"type\")\n@classmethod\ndef validate_type(cls, v: str) -&gt; str:\n    \"\"\"Validate file type is supported.\"\"\"\n    valid_types = {\"image\", \"pdf\", \"text\", \"excel\", \"word\", \"powerpoint\", \"csv\"}\n    if v not in valid_types:\n        raise ValueError(f\"type must be one of {valid_types}, got {v}\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.test_case.TestCaseModel","title":"<code>TestCaseModel</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Test case for agent evaluation.</p> <p>Represents a single test scenario with input, optional expected output, expected tool usage, and multimodal file inputs.</p>"},{"location":"api/models/#holodeck.models.test_case.TestCaseModel.validate_files","title":"<code>validate_files(v)</code>  <code>classmethod</code>","text":"<p>Validate files list is not empty if provided.</p> Source code in <code>src/holodeck/models/test_case.py</code> <pre><code>@field_validator(\"files\")\n@classmethod\ndef validate_files(cls, v: list[FileInput] | None) -&gt; list[FileInput] | None:\n    \"\"\"Validate files list is not empty if provided.\"\"\"\n    if v is not None and len(v) &gt; 10:\n        raise ValueError(\"Maximum 10 files per test case\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.test_case.TestCaseModel.validate_ground_truth","title":"<code>validate_ground_truth(v)</code>  <code>classmethod</code>","text":"<p>Validate ground_truth is not empty if provided.</p> Source code in <code>src/holodeck/models/test_case.py</code> <pre><code>@field_validator(\"ground_truth\")\n@classmethod\ndef validate_ground_truth(cls, v: str | None) -&gt; str | None:\n    \"\"\"Validate ground_truth is not empty if provided.\"\"\"\n    if v is not None and (not v or not v.strip()):\n        raise ValueError(\"ground_truth must be non-empty if provided\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.test_case.TestCaseModel.validate_input","title":"<code>validate_input(v)</code>  <code>classmethod</code>","text":"<p>Validate input is not empty.</p> Source code in <code>src/holodeck/models/test_case.py</code> <pre><code>@field_validator(\"input\")\n@classmethod\ndef validate_input(cls, v: str) -&gt; str:\n    \"\"\"Validate input is not empty.\"\"\"\n    if not v or not v.strip():\n        raise ValueError(\"input must be a non-empty string\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.test_case.TestCaseModel.validate_name","title":"<code>validate_name(v)</code>  <code>classmethod</code>","text":"<p>Validate name is not empty if provided.</p> Source code in <code>src/holodeck/models/test_case.py</code> <pre><code>@field_validator(\"name\")\n@classmethod\ndef validate_name(cls, v: str | None) -&gt; str | None:\n    \"\"\"Validate name is not empty if provided.\"\"\"\n    if v is not None and (not v or not v.strip()):\n        raise ValueError(\"name must be non-empty if provided\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.test_case.TestCase","title":"<code>TestCase = TestCaseModel</code>  <code>module-attribute</code>","text":""},{"location":"api/models/#global-configuration-models","title":"Global Configuration Models","text":""},{"location":"api/models/#holodeck.models.config.VectorstoreConfig","title":"<code>VectorstoreConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Vectorstore configuration for global defaults.</p> <p>Specifies connection details and options for a specific vectorstore backend.</p>"},{"location":"api/models/#holodeck.models.config.VectorstoreConfig.validate_connection_string","title":"<code>validate_connection_string(v)</code>  <code>classmethod</code>","text":"<p>Validate connection_string is not empty.</p> Source code in <code>src/holodeck/models/config.py</code> <pre><code>@field_validator(\"connection_string\")\n@classmethod\ndef validate_connection_string(cls, v: str) -&gt; str:\n    \"\"\"Validate connection_string is not empty.\"\"\"\n    if not v or not v.strip():\n        raise ValueError(\"connection_string must be a non-empty string\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.config.VectorstoreConfig.validate_provider","title":"<code>validate_provider(v)</code>  <code>classmethod</code>","text":"<p>Validate provider is not empty.</p> Source code in <code>src/holodeck/models/config.py</code> <pre><code>@field_validator(\"provider\")\n@classmethod\ndef validate_provider(cls, v: str) -&gt; str:\n    \"\"\"Validate provider is not empty.\"\"\"\n    if not v or not v.strip():\n        raise ValueError(\"provider must be a non-empty string\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.config.DeploymentConfig","title":"<code>DeploymentConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Deployment configuration for global defaults.</p> <p>Specifies deployment platform and settings for deploying agents.</p>"},{"location":"api/models/#holodeck.models.config.DeploymentConfig.validate_type","title":"<code>validate_type(v)</code>  <code>classmethod</code>","text":"<p>Validate type is not empty.</p> Source code in <code>src/holodeck/models/config.py</code> <pre><code>@field_validator(\"type\")\n@classmethod\ndef validate_type(cls, v: str) -&gt; str:\n    \"\"\"Validate type is not empty.\"\"\"\n    if not v or not v.strip():\n        raise ValueError(\"type must be a non-empty string\")\n    return v\n</code></pre>"},{"location":"api/models/#holodeck.models.config.GlobalConfig","title":"<code>GlobalConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Global configuration entity.</p> <p>Configuration stored in ~/.holodeck/config.yaml for sharing defaults across multiple agents, including LLM providers, vectorstores, and deployment settings.</p>"},{"location":"api/models/#error-models","title":"Error Models","text":""},{"location":"api/models/#holodeck.lib.errors.HoloDeckError","title":"<code>HoloDeckError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for all HoloDeck errors.</p> <p>All HoloDeck-specific exceptions inherit from this class, enabling centralized exception handling and error tracking.</p>"},{"location":"api/models/#holodeck.lib.errors.ConfigError","title":"<code>ConfigError(field, message)</code>","text":"<p>               Bases: <code>HoloDeckError</code></p> <p>Exception raised for configuration errors.</p> <p>This exception is raised when configuration loading or parsing fails. It includes field-specific information to help users identify and fix configuration issues.</p> <p>Attributes:</p> Name Type Description <code>field</code> <p>The configuration field that caused the error</p> <code>message</code> <p>Human-readable error message describing the issue</p> <p>Initialize ConfigError with field and message.</p> <p>Parameters:</p> Name Type Description Default <code>field</code> <code>str</code> <p>Configuration field name where error occurred</p> required <code>message</code> <code>str</code> <p>Descriptive error message</p> required Source code in <code>src/holodeck/lib/errors.py</code> <pre><code>def __init__(self, field: str, message: str) -&gt; None:\n    \"\"\"Initialize ConfigError with field and message.\n\n    Args:\n        field: Configuration field name where error occurred\n        message: Descriptive error message\n    \"\"\"\n    self.field = field\n    self.message = message\n    super().__init__(f\"Configuration error in '{field}': {message}\")\n</code></pre>"},{"location":"api/models/#holodeck.lib.errors.ValidationError","title":"<code>ValidationError(field, message, expected, actual)</code>","text":"<p>               Bases: <code>HoloDeckError</code></p> <p>Exception raised for validation errors during configuration parsing.</p> <p>Provides detailed information about what was expected versus what was received, enabling users to quickly understand and fix validation issues.</p> <p>Attributes:</p> Name Type Description <code>field</code> <p>The field that failed validation</p> <code>message</code> <p>Description of the validation failure</p> <code>expected</code> <p>Human description of expected value/type</p> <code>actual</code> <p>The actual value that failed validation</p> <p>Initialize ValidationError with detailed information.</p> <p>Parameters:</p> Name Type Description Default <code>field</code> <code>str</code> <p>Field that failed validation (can use dot notation for nested fields)</p> required <code>message</code> <code>str</code> <p>Description of what went wrong</p> required <code>expected</code> <code>str</code> <p>Human-readable description of expected value</p> required <code>actual</code> <code>str</code> <p>The actual value that failed</p> required Source code in <code>src/holodeck/lib/errors.py</code> <pre><code>def __init__(\n    self,\n    field: str,\n    message: str,\n    expected: str,\n    actual: str,\n) -&gt; None:\n    \"\"\"Initialize ValidationError with detailed information.\n\n    Args:\n        field: Field that failed validation (can use dot notation for nested fields)\n        message: Description of what went wrong\n        expected: Human-readable description of expected value\n        actual: The actual value that failed\n    \"\"\"\n    self.field = field\n    self.message = message\n    self.expected = expected\n    self.actual = actual\n    full_message = (\n        f\"Validation error in '{field}': {message}\\n\"\n        f\"  Expected: {expected}\\n\"\n        f\"  Got: {actual}\"\n    )\n    super().__init__(full_message)\n</code></pre>"},{"location":"api/models/#holodeck.lib.errors.FileNotFoundError","title":"<code>FileNotFoundError(path, message)</code>","text":"<p>               Bases: <code>HoloDeckError</code></p> <p>Exception raised when a configuration file is not found.</p> <p>Includes the file path and helpful suggestions for resolving the issue.</p> <p>Attributes:</p> Name Type Description <code>path</code> <p>Path to the file that was not found</p> <code>message</code> <p>Human-readable error message</p> <p>Initialize FileNotFoundError with path and message.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to the file that was not found</p> required <code>message</code> <code>str</code> <p>Descriptive error message, optionally with suggestions</p> required Source code in <code>src/holodeck/lib/errors.py</code> <pre><code>def __init__(self, path: str, message: str) -&gt; None:\n    \"\"\"Initialize FileNotFoundError with path and message.\n\n    Args:\n        path: Path to the file that was not found\n        message: Descriptive error message, optionally with suggestions\n    \"\"\"\n    self.path = path\n    self.message = message\n    super().__init__(f\"File not found: {path}\\n{message}\")\n</code></pre>"},{"location":"examples/","title":"Agent Configuration Examples","text":"<p>This directory contains example agent.yaml files demonstrating different features and patterns. Start with <code>basic_agent.yaml</code> and progress to more complex configurations as needed.</p>"},{"location":"examples/#quick-reference","title":"Quick Reference","text":"Example Use Case Features Demonstrated <code>basic_agent.yaml</code> Getting started Minimal valid config, inline instructions, no tools <code>with_tools.yaml</code> Real-world workflows All 4 tool types: vectorstore, function, MCP, prompt <code>with_evaluations.yaml</code> Quality assurance AI metrics, NLP metrics, per-metric model override <code>with_global_config.yaml</code> Multi-environment setups Config precedence, env var substitution, inheritance"},{"location":"examples/#examples","title":"Examples","text":""},{"location":"examples/#basic_agentyaml","title":"<code>basic_agent.yaml</code>","text":"<p>Purpose: Minimal valid agent configuration</p> <p>Features: - Simple agent metadata (name, description) - OpenAI model provider (gpt-4o-mini) - Inline system instructions (no external files) - No tools (can run standalone for chat)</p> <p>When to use: - Learning basic agent.yaml structure - Testing configuration loading without tool complexity - Building a simple chatbot or Q&amp;A assistant</p> <p>Try it: <pre><code># Set your API key\nexport OPENAI_API_KEY=your-key-here\n\n# Run the agent\nholodeck run basic_agent.yaml\n\n# Or validate configuration\nholodeck validate basic_agent.yaml\n</code></pre></p> <p>Key Concepts: - <code>model</code> \u2192 Required. Specifies LLM provider, model name, and generation settings - <code>instructions</code> \u2192 Required. Can be inline (shown here) or from a file - Minimal config is valid and functional</p>"},{"location":"examples/#with_toolsyaml","title":"<code>with_tools.yaml</code>","text":"<p>Purpose: Comprehensive tool integration example</p> <p>Features: - Vectorstore tool: Semantic search over documentation - Function tool: Custom Python function execution - MCP tool: Standardized integrations (filesystem, databases, APIs) - Prompt tool: LLM-powered semantic functions - Test cases with expected tool validation</p> <p>When to use: - Building agents that need external data access - Executing custom business logic - Integrating standardized tools (GitHub, Slack, databases) - AI-powered data processing</p> <p>Prerequisites: <pre><code># Create the required files this example references:\nmkdir -p ./data/docs ./tools\n\n# Create a simple documentation file\necho \"Installation: Run 'pip install holodeck'\" &gt; ./data/docs/getting_started.txt\n\n# Create a Python tool file (tools/discount_calculator.py)\ncat &gt; ./tools/discount_calculator.py &lt;&lt; 'EOF'\ndef calculate_discount(customer_tier: str, order_amount: float, applied_coupon: str = None) -&gt; dict:\n    \"\"\"Calculate order discount based on tier and amount.\"\"\"\n    tier_discounts = {\n        'bronze': 0.05,\n        'silver': 0.10,\n        'gold': 0.15,\n        'platinum': 0.25\n    }\n\n    base_discount = tier_discounts.get(customer_tier.lower(), 0)\n    coupon_discount = 0.05 if applied_coupon else 0\n\n    total_discount = min(base_discount + coupon_discount, 0.50)  # Cap at 50%\n    discount_amount = order_amount * total_discount\n\n    return {\n        'original_amount': order_amount,\n        'discount_percent': int(total_discount * 100),\n        'discount_amount': discount_amount,\n        'final_amount': order_amount - discount_amount\n    }\nEOF\n\n# Create instructions file (instructions.txt)\ncat &gt; ./instructions.txt &lt;&lt; 'EOF'\nYou are a customer service agent with access to:\n- Documentation database (docs-search tool)\n- Discount calculation system (calculate-discount tool)\n- File system access (file-browser tool)\n- Sentiment analysis (sentiment-analyzer tool)\n\nUse the most appropriate tool for each customer request.\nEOF\n</code></pre></p> <p>Try it: <pre><code>export OPENAI_API_KEY=your-key-here\nexport ANTHROPIC_API_KEY=your-key-here\n\nholodeck run with_tools.yaml\n</code></pre></p> <p>Tool Types Explained: 1. Vectorstore: Semantic search\u2014find relevant documents based on meaning, not keywords 2. Function: Execute Python code\u2014calculate, transform, validate data 3. MCP: Standardized integrations\u2014filesystem, GitHub, databases, Slack 4. Prompt: LLM-powered\u2014use AI to process data (sentiment analysis, summarization)</p> <p>Key Concepts: - Tool types are discriminated by the <code>type</code> field - Each tool type has specific required fields - Tools are composable\u2014agents can use multiple tool types together - File paths are relative to the agent.yaml location</p>"},{"location":"examples/#with_evaluationsyaml","title":"<code>with_evaluations.yaml</code>","text":"<p>Purpose: Quality assurance and evaluation framework</p> <p>Features: - AI-powered metrics (groundedness, relevance, coherence) - NLP metrics (F1 score, ROUGE) - Per-metric model overrides - Soft failure mode (continue on evaluation errors) - Threshold-based pass/fail criteria</p> <p>When to use: - Validating agent response quality - Ensuring responses are grounded in data - Measuring accuracy against ground truth - Running quality gates in production pipelines</p> <p>Metric Types:</p> Metric Type Scale Use Case <code>groundedness</code> AI 1-5 Response uses provided context <code>relevance</code> AI 1-5 Response addresses the query <code>coherence</code> AI 1-5 Response is logical and clear <code>f1_score</code> NLP 0-100 Precision/recall vs. ground truth <code>rouge</code> NLP 0-100 N-gram overlap with reference <code>bleu</code> NLP 0-100 Bilingual evaluation study <p>Try it: <pre><code>export OPENAI_API_KEY=your-key-here\nexport ANTHROPIC_API_KEY=your-key-here\n\n# Run evaluations\nholodeck evaluate with_evaluations.yaml\n\n# Run with verbose output\nholodeck evaluate with_evaluations.yaml --verbose\n</code></pre></p> <p>Configuration Precedence: <pre><code>evaluations:\n  model:                              # Global model (applies to all metrics)\n    provider: openai\n    name: gpt-4o\n  metrics:\n    - metric: groundedness\n      model:                          # Per-metric override (highest precedence)\n        provider: openai\n        name: gpt-4o-mini             # Different model for this metric only\n</code></pre></p> <p>Key Concepts: - Evaluations run after agent execution completes - Each metric can override the evaluation model - <code>threshold</code> defines minimum passing score - <code>fail_on_error: false</code> = soft failure (evaluation error doesn't block) - <code>fail_on_error: true</code> = hard failure (evaluation error stops test)</p>"},{"location":"examples/#with_global_configyaml","title":"<code>with_global_config.yaml</code>","text":"<p>Purpose: Configuration precedence and environment-specific setup</p> <p>Features: - Environment variable substitution (<code>${VAR_NAME}</code>) - Configuration inheritance from global config - Agent-specific overrides - Multi-environment setup (dev/staging/prod)</p> <p>Global Config Location: <code>~/.holodeck/config.yaml</code></p> <p>Sample Global Config: <pre><code># ~/.holodeck/config.yaml\nmodel:\n  provider: openai\n  name: gpt-4o-mini\n  temperature: 0.7\n\ndeployment:\n  endpoint_prefix: /api/v1\n\nproviders:\n  openai:\n    api_key: ${OPENAI_API_KEY}\n  azure:\n    api_key: ${AZURE_API_KEY}\n    endpoint: ${AZURE_ENDPOINT}\n</code></pre></p> <p>Configuration Precedence (highest to lowest): 1. Agent-specific settings (this file): Explicit values in agent.yaml 2. Environment variables: <code>${VAR_NAME}</code> resolved at runtime 3. Global config: <code>~/.holodeck/config.yaml</code> applied as defaults</p> <p>Try it: <pre><code># Set environment variables\nexport AZURE_API_KEY=your-key-here\nexport AZURE_ENDPOINT=https://your-instance.openai.azure.com/\n\n# Create global config\nmkdir -p ~/.holodeck\ncat &gt; ~/.holodeck/config.yaml &lt;&lt; 'EOF'\nmodel:\n  provider: openai\n  name: gpt-4o-mini\n  temperature: 0.7\nEOF\n\n# Run agent (uses merged config)\nholodeck run with_global_config.yaml\n</code></pre></p> <p>Key Concepts: - Global config provides defaults for all agents - Agent.yaml overrides global settings - Environment variables fill sensitive values (API keys) - Substitution pattern: <code>${VARIABLE_NAME}</code> - Missing environment variables cause errors at config load time</p> <p>Multi-Environment Example: <pre><code># Development\nexport OPENAI_API_KEY=sk-dev-...\nexport ENV=development\n\n# Staging\nexport OPENAI_API_KEY=sk-staging-...\nexport ENV=staging\n\n# Production\nexport OPENAI_API_KEY=sk-prod-...\nexport ENV=production\n\n# Same agent.yaml works in all environments\nholodeck run with_global_config.yaml\n</code></pre></p>"},{"location":"examples/#common-patterns","title":"Common Patterns","text":""},{"location":"examples/#pattern-1-development-vs-production","title":"Pattern 1: Development vs. Production","text":"<pre><code># Use global config for dev defaults\n# Override in agent.yaml for production\n\n# agent.yaml\nmodel:\n  provider: openai\n  name: ${MODEL_NAME}  # env: gpt-4o-mini (dev) or gpt-4o (prod)\n  temperature: ${TEMPERATURE}  # env: 0.7 (dev) or 0.3 (prod)\n</code></pre>"},{"location":"examples/#pattern-2-sensitive-data","title":"Pattern 2: Sensitive Data","text":"<pre><code># Never commit API keys\n# Use environment variables or global config\n\ninstructions:\n  inline: |\n    Use the API token from environment variable for authentication.\n\ntools:\n  - name: api-client\n    type: function\n    file: ./tools/api.py\n    # API key injected via ${API_KEY} at runtime\n</code></pre>"},{"location":"examples/#pattern-3-modular-configurations","title":"Pattern 3: Modular Configurations","text":"<pre><code># Split large configurations\n\n# main_agent.yaml\nname: multi-step-agent\ninstructions:\n  file: ./instructions.md  # Separate file\n\ntools:\n  # Reference tool configs in separate files (if using advanced tooling)\n  - name: tool1\n    type: vectorstore\n    source: ./data/kb/\n</code></pre>"},{"location":"examples/#next-steps","title":"Next Steps","text":"<ol> <li>Start with <code>basic_agent.yaml</code>: Understand structure</li> <li>Progress to <code>with_tools.yaml</code>: Add tool integration</li> <li>Explore <code>with_evaluations.yaml</code>: Add quality gates</li> <li>Deploy with <code>with_global_config.yaml</code>: Production setup</li> </ol> <p>For more information: - See docs/guides/agent-configuration.md for schema reference - See docs/guides/tools.md for tool type details - See docs/guides/evaluations.md for evaluation configuration - See docs/guides/global-config.md for precedence rules</p>"},{"location":"examples/#troubleshooting","title":"Troubleshooting","text":"<p>Q: ConfigError when loading agent.yaml - Check file paths (relative to agent.yaml location) - Verify all required fields are present - Ensure YAML syntax is valid</p> <p>Q: Tool execution fails - Verify tool files exist and are readable - Check Python function names match tool configuration - Ensure vectorstore source path contains data</p> <p>Q: Environment variable not substituted - Use <code>${VARIABLE_NAME}</code> syntax - Set variable before running: <code>export VARIABLE_NAME=value</code> - Check for typos in variable names</p> <p>Q: Evaluations run but show errors - If <code>fail_on_error: false</code>, errors are logged but don't block - Check model API keys are set - Verify ground_truth and test input are clear and specific</p> <p>Created: 2025-10-19 | Version: 0.1.0</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Get HoloDeck up and running in minutes.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.14+ (check with <code>python --version</code>)</li> <li>pip (usually included with Python)</li> <li>Git (for development setup)</li> </ul>"},{"location":"getting-started/installation/#standard-installation","title":"Standard Installation","text":""},{"location":"getting-started/installation/#1-install-from-pypi","title":"1. Install from PyPI","text":"<pre><code>pip install holodeck-ai\n</code></pre> <p>This installs the latest stable version and all required dependencies:</p> <ul> <li><code>pydantic</code> - Configuration validation</li> <li><code>pyyaml</code> - YAML parsing</li> <li><code>python-dotenv</code> - Environment variable support</li> <li><code>semantic-kernel</code> - Agent framework base</li> </ul>"},{"location":"getting-started/installation/#2-verify-installation","title":"2. Verify Installation","text":"<p>Check that HoloDeck is installed correctly:</p> <pre><code>python -m holodeck --version\n# Output: holodeck 0.1.0\n</code></pre> <p>Try importing the main module:</p> <pre><code>from holodeck.config.loader import ConfigLoader\nprint(\"\u2713 HoloDeck installed successfully!\")\n</code></pre>"},{"location":"getting-started/installation/#development-setup","title":"Development Setup","text":"<p>For development or contributing to HoloDeck:</p>"},{"location":"getting-started/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/anthropics/holodeck.git\ncd holodeck\n</code></pre>"},{"location":"getting-started/installation/#2-initialize-development-environment","title":"2. Initialize Development Environment","text":"<pre><code># Create virtual environment and install all dev dependencies\nmake init\n</code></pre> <p>This command:</p> <ul> <li>Creates a Python virtual environment in <code>.venv/</code></li> <li>Installs dependencies (<code>poetry install</code>)</li> <li>Installs pre-commit hooks</li> <li>Configures development tools (black, ruff, mypy)</li> </ul>"},{"location":"getting-started/installation/#3-activate-virtual-environment","title":"3. Activate Virtual Environment","text":"<pre><code># On macOS / Linux\nsource .venv/bin/activate\n\n# On Windows\n.venv\\Scripts\\activate\n</code></pre> <p>You'll see <code>(.venv)</code> prefix in your terminal when activated.</p>"},{"location":"getting-started/installation/#4-verify-development-setup","title":"4. Verify Development Setup","text":"<pre><code># Check Python and pytest\npython --version  # Should be 3.14+\npytest --version  # Should show pytest available\n\n# Run the test suite\nmake test\n</code></pre>"},{"location":"getting-started/installation/#setup-verification-checklist","title":"Setup Verification Checklist","text":"<p>After installation, verify everything works:</p> <pre><code># \u2713 Check Python version\npython --version\n# Expected: Python 3.14.x\n\n# \u2713 Check HoloDeck is installed\npython -c \"import holodeck; print(holodeck.__version__)\"\n# Expected: 0.1.0\n\n# \u2713 Check ConfigLoader works\npython &lt;&lt; 'EOF'\nfrom holodeck.config.loader import ConfigLoader\nloader = ConfigLoader()\nprint(\"\u2713 ConfigLoader imported successfully\")\nEOF\n\n# \u2713 Create a test agent.yaml file\ncat &gt; test-agent.yaml &lt;&lt; 'EOF'\nname: \"Test Agent\"\ndescription: \"Verification test agent\"\nmodel:\n  provider: \"openai\"\n  name: \"gpt-4o-mini\"\ninstructions:\n  inline: \"You are a helpful assistant.\"\nEOF\n\n# \u2713 Load and validate the agent (requires OPENAI_API_KEY env var)\npython &lt;&lt; 'EOF'\nfrom holodeck.config.loader import ConfigLoader\nloader = ConfigLoader()\nagent = loader.load_agent_yaml(\"test-agent.yaml\")\nprint(f\"\u2713 Agent loaded: {agent.name}\")\nEOF\n</code></pre>"},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<p>HoloDeck uses environment variables for API credentials. Set these in your shell or <code>.env</code> file:</p>"},{"location":"getting-started/installation/#openai","title":"OpenAI","text":"<pre><code>export OPENAI_API_KEY=\"sk-...\"\n</code></pre>"},{"location":"getting-started/installation/#azure-openai","title":"Azure OpenAI","text":"<pre><code>export AZURE_OPENAI_ENDPOINT=\"https://your-resource.openai.azure.com/\"\nexport AZURE_OPENAI_API_KEY=\"your-key\"\nexport OPENAI_API_VERSION=\"2024-02-15-preview\"\n</code></pre>"},{"location":"getting-started/installation/#anthropic","title":"Anthropic","text":"<pre><code>export ANTHROPIC_API_KEY=\"sk-ant-...\"\n</code></pre>"},{"location":"getting-started/installation/#managing-environment-variables-with-env-files","title":"Managing Environment Variables with .env Files","text":"<p>Create a <code>.env</code> file in your project directory:</p> <pre><code># .env\nOPENAI_API_KEY=sk-...\nANTHROPIC_API_KEY=sk-ant-...\n</code></pre> <p>Then load it in your Python script:</p> <pre><code>from dotenv import load_dotenv\nload_dotenv()\n\nfrom holodeck.config.loader import ConfigLoader\n# Now all env vars from .env are available\n</code></pre> <p>\u26a0\ufe0f Never commit <code>.env</code> files to version control! Add to <code>.gitignore</code>:</p> <pre><code># .gitignore\n.env\n.env.local\n.env.*.local\n</code></pre>"},{"location":"getting-started/installation/#development-dependencies-optional","title":"Development Dependencies (Optional)","text":"<p>For development, install additional tools:</p> <pre><code># Activate your virtual environment first\nsource .venv/bin/activate  # macOS/Linux\n\n# Install development dependencies\nmake install-dev\n</code></pre> <p>This adds:</p> <ul> <li><code>pytest-cov</code> - Code coverage measurement</li> <li><code>pytest-xdist</code> - Parallel test execution</li> <li><code>black</code> - Code formatter</li> <li><code>ruff</code> - Linter</li> <li><code>mypy</code> - Type checker</li> <li><code>bandit</code> - Security analyzer</li> </ul>"},{"location":"getting-started/installation/#common-development-commands","title":"Common Development Commands","text":"<p>Once installed, use these commands during development:</p> <pre><code>make format             # Format code with black + ruff\nmake format-check       # Check formatting (without modifying)\nmake lint               # Run linting checks\nmake type-check         # Type checking with mypy\nmake security           # Security checks (bandit, safety)\nmake test               # Run test suite\nmake test-coverage      # Run tests with coverage report\nmake test-parallel      # Run tests in parallel\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#python-314-required","title":"\"Python 3.14+ required\"","text":"<p>If you see this error, you need a newer Python version:</p> <pre><code># Check your Python version\npython --version\n\n# On macOS with Homebrew\nbrew install python@3.14\n\n# On Ubuntu/Debian\nsudo apt-get install python3.14 python3.14-venv\n\n# On Windows, download from python.org\n</code></pre>"},{"location":"getting-started/installation/#modulenotfounderror-no-module-named-holodeck","title":"\"ModuleNotFoundError: No module named 'holodeck'\"","text":"<p>Make sure HoloDeck is installed:</p> <pre><code># Verify installation\npip show holodeck\n\n# Reinstall if needed\npip install --upgrade holodeck\n</code></pre>"},{"location":"getting-started/installation/#openai_api_key-not-found","title":"\"OPENAI_API_KEY not found\"","text":"<p>Ensure your API key is set:</p> <pre><code># Check if env var is set\necho $OPENAI_API_KEY  # macOS/Linux\necho %OPENAI_API_KEY%  # Windows\n\n# Set it if missing (use your actual key)\nexport OPENAI_API_KEY=\"sk-...\"\n</code></pre>"},{"location":"getting-started/installation/#virtual-environment-issues-development","title":"Virtual Environment Issues (Development)","text":"<p>If your virtual environment is broken:</p> <pre><code># Remove and recreate\nrm -rf .venv\n\n# Reinitialize\nmake init\n\n# Activate\nsource .venv/bin/activate\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>\u2705 Installation complete!</li> <li>\ud83d\udcd6 Follow the Quickstart Guide \u2192</li> <li>\ud83d\udcda Read Agent Configuration Guide \u2192</li> <li>\ud83d\udca1 Explore Examples \u2192</li> </ul>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<ul> <li>Installation Issues: Check Troubleshooting section</li> <li>GitHub Issues: Report bugs at github.com/anthropics/holodeck/issues</li> <li>Documentation: Visit docs.holodeck.ai</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quickstart Guide","text":"<p>Get up and running with HoloDeck in 5 minutes. Choose your path below:</p> <ul> <li>Option A (Recommended): Use <code>holodeck init</code> CLI command for a guided setup</li> <li>Option B: Manually create and load agent.yaml files with Python</li> </ul>"},{"location":"getting-started/quickstart/#before-you-start","title":"Before You Start","text":"<p>Ensure you've completed the Installation Guide:</p> <pre><code>pip install holodeck-ai\npython -m holodeck --version  # Should output: holodeck 0.1.0\n</code></pre> <p>Set up your API key (example for OpenAI):</p> <pre><code>export OPENAI_API_KEY=\"sk-your-key-here\"\n</code></pre>"},{"location":"getting-started/quickstart/#option-a-quick-start-with-cli-recommended","title":"Option A: Quick Start with CLI (Recommended)","text":""},{"location":"getting-started/quickstart/#step-1-initialize-a-new-agent-project","title":"Step 1: Initialize a New Agent Project","text":"<p>Use the <code>holodeck init</code> command to create a new project with templates:</p> <pre><code># Create a basic conversational agent\nholodeck init my-chatbot\n\n# Or choose a different template\nholodeck init research-agent --template research\nholodeck init support-bot --template customer-support\n\n# With metadata\nholodeck init my-agent --description \"My AI agent\" --author \"Your Name\"\n</code></pre> <p>This creates a complete project structure:</p> <pre><code>my-chatbot/\n\u251c\u2500\u2500 agent.yaml              # Main configuration\n\u251c\u2500\u2500 instructions/\n\u2502   \u2514\u2500\u2500 system-prompt.md   # Agent behavior\n\u251c\u2500\u2500 tools/                 # Custom functions\n\u251c\u2500\u2500 data/                  # Grounding data\n\u2514\u2500\u2500 tests/                 # Test cases\n</code></pre>"},{"location":"getting-started/quickstart/#step-2-edit-your-agent-configuration","title":"Step 2: Edit Your Agent Configuration","text":"<pre><code>cd my-chatbot\n</code></pre> <p>Open <code>agent.yaml</code> and customize: - Agent name and description - Model provider (OpenAI, Azure, Anthropic) - Instructions/system prompt - Tools and data sources - Test cases</p>"},{"location":"getting-started/quickstart/#step-3-run-your-agent","title":"Step 3: Run Your Agent","text":"<pre><code># Interactive chat\nholodeck chat agent.yaml\n\n# Run tests\nholodeck test agent.yaml\n\n# Deploy locally\nholodeck deploy agent.yaml --port 8000\n</code></pre>"},{"location":"getting-started/quickstart/#option-b-manual-setup-with-python","title":"Option B: Manual Setup with Python","text":"<p>If you prefer to create files manually, follow the steps below.</p>"},{"location":"getting-started/quickstart/#step-1-create-your-first-agent-agentyaml","title":"Step 1: Create Your First Agent (agent.yaml)","text":"<p>Create a file called <code>my-agent.yaml</code>:</p> <pre><code>name: \"Quick Start Agent\"\ndescription: \"A simple agent to get started with HoloDeck\"\nauthor: \"Your Name\"\nmodel:\n  provider: \"openai\"\n  name: \"gpt-4o-mini\"\n  temperature: 0.7\n  max_tokens: 500\ninstructions:\n  inline: |\n    You are a helpful AI assistant.\n    Answer questions accurately and concisely.\n</code></pre> <p>This minimal agent has:</p> <ul> <li>name: Human-readable agent name</li> <li>model: LLM provider and configuration</li> <li>instructions: How the agent should behave (inline text or file reference)</li> </ul>"},{"location":"getting-started/quickstart/#step-2-load-and-use-the-agent","title":"Step 2: Load and Use the Agent","text":"<p>Create a Python script <code>load_agent.py</code>:</p> <pre><code>from holodeck.config.loader import ConfigLoader\n\n# Create a loader\nloader = ConfigLoader()\n\n# Load the agent configuration\nagent = loader.load_agent_yaml(\"my-agent.yaml\")\n\n# Access agent properties\nprint(f\"Agent Name: {agent.name}\")\nprint(f\"Description: {agent.description}\")\nif agent.author:\n    print(f\"Author: {agent.author}\")\nprint(f\"Model: {agent.model.name}\")\nprint(f\"Provider: {agent.model.provider}\")\n</code></pre> <p>Run it:</p> <pre><code>python load_agent.py\n</code></pre> <p>Expected output:</p> <pre><code>Agent Name: Quick Start Agent\nDescription: A simple agent to get started with HoloDeck\nModel: gpt-4o-mini\nProvider: openai\n</code></pre>"},{"location":"getting-started/quickstart/#step-3-handle-errors-gracefully","title":"Step 3: Handle Errors Gracefully","text":"<p>Real-world scenarios require error handling. Update <code>load_agent.py</code>:</p> <pre><code>from holodeck.config.loader import ConfigLoader\nfrom holodeck.lib.errors import ConfigError\n\nloader = ConfigLoader()\n\ntry:\n    agent = loader.load_agent_yaml(\"my-agent.yaml\")\n    print(f\"\u2713 Successfully loaded agent: {agent.name}\")\n\nexcept FileNotFoundError as e:\n    print(f\"\u274c File not found: {e}\")\n    print(\"Tip: Make sure my-agent.yaml exists in the current directory\")\n\nexcept ConfigError as e:\n    print(f\"\u274c Configuration error: {e}\")\n    print(\"Tip: Check your YAML syntax and required fields\")\n</code></pre> <p>Try it by running:</p> <pre><code># Load successfully\npython load_agent.py\n\n# Simulate missing file\npython load_agent.py  # (rename/delete my-agent.yaml first)\n</code></pre>"},{"location":"getting-started/quickstart/#step-4-common-error-scenarios","title":"Step 4: Common Error Scenarios","text":""},{"location":"getting-started/quickstart/#missing-required-fields","title":"Missing Required Fields","text":"<p>Create <code>invalid-agent.yaml</code>:</p> <pre><code>name: \"Incomplete Agent\"\n# Missing: model and instructions!\n</code></pre> <p>Load it and see what happens:</p> <pre><code>from holodeck.config.loader import ConfigLoader\nfrom holodeck.lib.errors import ConfigError\n\ntry:\n    agent = ConfigLoader().load_agent_yaml(\"invalid-agent.yaml\")\nexcept ConfigError as e:\n    print(f\"Configuration Error:\\n{e}\")\n</code></pre> <p>Output:</p> <pre><code>Configuration Error:\nField 'model' is required but missing\nField 'instructions' is required but missing\n</code></pre>"},{"location":"getting-started/quickstart/#invalid-yaml-syntax","title":"Invalid YAML Syntax","text":"<p>Create <code>bad-syntax.yaml</code>:</p> <pre><code>name: Invalid YAML\nmodel:\n  provider: openai\n  - this line is invalid\ninstructions: |\n  Broken indentation\n bad spacing\n</code></pre> <p>HoloDeck will catch parsing errors:</p> <pre><code>try:\n    agent = ConfigLoader().load_agent_yaml(\"bad-syntax.yaml\")\nexcept ConfigError as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"getting-started/quickstart/#invalid-model-configuration","title":"Invalid Model Configuration","text":"<pre><code>name: \"Bad Model Config\"\nmodel:\n  provider: \"invalid_provider\" # \u274c Not a valid provider\n  name: \"gpt-4o\"\ninstructions:\n  inline: \"Help\"\n</code></pre> <p>Error output:</p> <pre><code>Configuration Error:\nField 'provider' must be one of: openai, azure_openai, anthropic\n</code></pre>"},{"location":"getting-started/quickstart/#step-5-add-tools-and-test-cases","title":"Step 5: Add Tools and Test Cases","text":"<p>Expand your agent with tools and test cases:</p> <pre><code>name: \"Research Assistant\"\ndescription: \"An agent that searches and analyzes information\"\nauthor: \"Alice Johnson\"\n\nmodel:\n  provider: \"openai\"\n  name: \"gpt-4o\"\n  temperature: 0.5\n  max_tokens: 2000\n\ninstructions:\n  file: \"instructions.md\" # Load from file\n\ntools:\n  - type: \"vectorstore\"\n    source: \"knowledge-base.json\"\n    vector_field: \"embeddings\"\n    chunk_size: 500\n\n  - type: \"mcp\"\n    server: \"web-search\"\n    description: \"Search the web for current information\"\n\ntest_cases:\n  - input: \"What are the latest developments in AI?\"\n    expected_tools: [\"web-search\"]\n    ground_truth: \"AI is rapidly evolving...\"\n\nevaluations:\n  metrics:\n    - name: \"groundedness\"\n      threshold: 0.8\n    - name: \"relevance\"\n      threshold: 0.75\n</code></pre>"},{"location":"getting-started/quickstart/#step-6-using-instructions-from-files","title":"Step 6: Using Instructions from Files","text":"<p>For longer instructions, use a separate file:</p> <p>instructions.md:</p> <pre><code>You are a research assistant focused on providing accurate, cited information.\n\n## Guidelines\n\n1. Always cite your sources\n2. Use web search for current information\n3. Provide comprehensive summaries\n4. Flag uncertain information\n\n## Constraints\n\n- Keep responses under 2000 tokens\n- Prefer primary sources over secondary\n</code></pre> <p>agent.yaml:</p> <pre><code>name: Research Assistant\ninstructions:\n  file: \"instructions.md\" # Relative to agent.yaml location\n</code></pre> <p>Load it:</p> <pre><code>loader = ConfigLoader()\nagent = loader.load_agent_yaml(\"agent.yaml\")\nprint(agent.instructions)  # Will contain full instructions from file\n</code></pre>"},{"location":"getting-started/quickstart/#step-7-environment-variables","title":"Step 7: Environment Variables","text":"<p>Use environment variables for sensitive data:</p> <p>agent.yaml:</p> <pre><code>name: \"Configured Agent\"\nmodel:\n  provider: \"openai\"\n  name: \"gpt-4o\"\ninstructions:\n  inline: \"Help users with their questions\"\n</code></pre> <p>Your <code>.env</code> file:</p> <pre><code>OPENAI_API_KEY=sk-...\nOPENAI_ORG_ID=org-...\n</code></pre> <p>Load and use:</p> <pre><code>from dotenv import load_dotenv\nload_dotenv()  # Loads .env file\n\nfrom holodeck.config.loader import ConfigLoader\nagent = ConfigLoader().load_agent_yaml(\"agent.yaml\")\n# API keys are now available from environment\n</code></pre>"},{"location":"getting-started/quickstart/#complete-example","title":"Complete Example","text":"<p>Here's a complete working example with best practices:</p> <p>agent.yaml:</p> <pre><code>name: \"Smart Assistant\"\ndescription: \"An intelligent assistant with search capabilities\"\nauthor: \"DevOps Team\"\n\nmodel:\n  provider: \"openai\"\n  name: \"gpt-4o-mini\"\n  temperature: 0.7\n  max_tokens: 1500\n\ninstructions:\n  inline: |\n    You are a helpful and knowledgeable AI assistant.\n    Provide accurate, concise answers to user questions.\n\ntools:\n  - type: \"mcp\"\n    server: \"filesystem\"\n    description: \"Access local files and documents\"\n\ntest_cases:\n  - input: \"What can you do?\"\n    ground_truth: \"Describe my capabilities including file access and question answering\"\n</code></pre> <p>main.py:</p> <pre><code>#!/usr/bin/env python3\n\"\"\"Example: Load and validate an HoloDeck agent.\"\"\"\n\nfrom holodeck.config.loader import ConfigLoader\nfrom holodeck.lib.errors import ConfigError\n\ndef main():\n    try:\n        # Load agent configuration\n        loader = ConfigLoader()\n        agent = loader.load_agent_yaml(\"agent.yaml\")\n\n        # Display agent information\n        print(f\"\u2713 Agent loaded successfully\")\n        print(f\"  Name: {agent.name}\")\n        print(f\"  Description: {agent.description}\")\n        print(f\"  Model: {agent.model.name} ({agent.model.provider})\")\n        print(f\"  Tools: {len(agent.tools or [])} configured\")\n        print(f\"  Test Cases: {len(agent.test_cases or [])} defined\")\n\n        return agent\n\n    except FileNotFoundError as e:\n        print(f\"\u274c Configuration file not found: {e}\")\n        print(f\"   Please create agent.yaml in the current directory\")\n        return None\n\n    except ConfigError as e:\n        print(f\"\u274c Configuration error: {e}\")\n        print(f\"   Please review your agent.yaml file\")\n        return None\n\nif __name__ == \"__main__\":\n    agent = main()\n    if agent:\n        print(\"\\n\u2713 Ready to use agent!\")\n</code></pre> <p>Run it:</p> <pre><code>python main.py\n</code></pre>"},{"location":"getting-started/quickstart/#common-patterns","title":"Common Patterns","text":""},{"location":"getting-started/quickstart/#pattern-1-load-and-validate-only","title":"Pattern 1: Load and Validate Only","text":"<pre><code>from holodeck.config.loader import ConfigLoader\nfrom holodeck.lib.errors import ConfigError\n\ntry:\n    agent = ConfigLoader().load_agent_yaml(\"agent.yaml\")\n    print(f\"\u2713 Valid agent: {agent.name}\")\nexcept ConfigError as e:\n    print(f\"\u2717 Invalid configuration: {e}\")\n</code></pre>"},{"location":"getting-started/quickstart/#pattern-2-graceful-degradation","title":"Pattern 2: Graceful Degradation","text":"<pre><code>from holodeck.config.loader import ConfigLoader\nfrom holodeck.lib.errors import ConfigError\n\nloader = ConfigLoader()\nagent = None\n\ntry:\n    agent = loader.load_agent_yaml(\"agent.yaml\")\nexcept ConfigError as e:\n    print(f\"Warning: Could not load agent.yaml: {e}\")\n    # Fall back to default or create new agent\n</code></pre>"},{"location":"getting-started/quickstart/#pattern-3-batch-processing","title":"Pattern 3: Batch Processing","text":"<pre><code>from pathlib import Path\nfrom holodeck.config.loader import ConfigLoader\nfrom holodeck.lib.errors import ConfigError\n\nagents = []\nerrors = []\n\nloader = ConfigLoader()\nfor yaml_file in Path(\".\").glob(\"agents/*.yaml\"):\n    try:\n        agent = loader.load_agent_yaml(str(yaml_file))\n        agents.append(agent)\n    except ConfigError as e:\n        errors.append((yaml_file, e))\n\nprint(f\"Loaded {len(agents)} agents, {len(errors)} errors\")\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>\ud83d\udcd6 Read Agent Configuration Reference \u2192</li> <li>\ud83d\udd27 Explore Tool Types \u2192</li> <li>\ud83d\udcca Learn About Evaluations \u2192</li> <li>\ud83d\udca1 Browse Examples \u2192</li> <li>\u270d\ufe0f API Reference \u2192</li> </ul>"},{"location":"getting-started/quickstart/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quickstart/#configerror-field-x-is-required","title":"\"ConfigError: Field 'X' is required\"","text":"<p>Your YAML is missing a required field. Check:</p> <ul> <li><code>name</code> - Agent name</li> <li><code>model</code> - LLM provider configuration</li> <li><code>instructions</code> - Agent behavior instructions</li> </ul>"},{"location":"getting-started/quickstart/#filenotfounderror-agentyaml-not-found","title":"\"FileNotFoundError: agent.yaml not found\"","text":"<p>The loader couldn't find <code>agent.yaml</code>. Ensure:</p> <ul> <li>File exists: <code>ls -la agent.yaml</code></li> <li>Correct path: Use absolute path if needed <code>loader.load_agent_yaml(\"/full/path/agent.yaml\")</code></li> <li>Working directory: <code>pwd</code> shows correct location</li> </ul>"},{"location":"getting-started/quickstart/#configerror-field-provider-must-be-one-of","title":"\"ConfigError: Field 'provider' must be one of...\"","text":"<p>Your model provider is invalid. Use one of:</p> <ul> <li><code>openai</code> (default)</li> <li><code>azure_openai</code> (requires AZURE_OPENAI_ENDPOINT)</li> <li><code>anthropic</code> (default: claude-3-sonnet)</li> </ul>"},{"location":"getting-started/quickstart/#module-not-found-holodeck","title":"\"Module not found: holodeck\"","text":"<p>HoloDeck isn't installed. Run:</p> <pre><code>pip install holodeck-ai\n</code></pre>"},{"location":"getting-started/quickstart/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udc1b Report bugs: GitHub Issues</li> <li>\ud83d\udcac Ask questions: GitHub Discussions</li> <li>\ud83d\udcda Full docs: https://docs.holodeck.ai</li> </ul>"},{"location":"guides/agent-configuration/","title":"Agent Configuration Guide","text":"<p>This guide explains how to define AI agents using HoloDeck's <code>agent.yaml</code> configuration file.</p>"},{"location":"guides/agent-configuration/#overview","title":"Overview","text":"<p>An agent configuration file defines a single AI agent with everything it needs:</p> <ul> <li>Model settings: Which LLM provider to use (OpenAI, Azure, Anthropic)</li> <li>Instructions: System prompt (from a file or inline)</li> <li>Tools: Capabilities the agent can use (search, functions, APIs, templates)</li> <li>Evaluations: Metrics to measure quality</li> <li>Test cases: Scenarios to validate the agent</li> </ul> <p>All configuration is declarative\u2014no code required.</p>"},{"location":"guides/agent-configuration/#basic-structure","title":"Basic Structure","text":"<pre><code>name: my-agent                    # Required: Agent name\ndescription: Agent description    # Optional: What this agent does\nauthor: \"Your Name\"               # Optional: Who created this agent\n\nmodel:                            # Required: LLM configuration\n  provider: openai                # Required: openai|azure_openai|anthropic\n  name: gpt-4o                    # Required: Model identifier\n  temperature: 0.7                # Optional: 0.0-2.0\n  max_tokens: 2000                # Optional: Maximum generation tokens\n\ninstructions:                     # Required: System prompt\n  inline: \"You are a helpful...\"  # Option 1: Inline text\n  # OR\n  # file: instructions.txt        # Option 2: External file\n\ntools: []                         # Optional: Agent capabilities\nevaluations:                      # Optional: Quality metrics\n  metrics: []\ntest_cases: []                    # Optional: Test scenarios\n</code></pre>"},{"location":"guides/agent-configuration/#agent-name","title":"Agent Name","text":"<ul> <li>Required: Yes</li> <li>Type: String</li> <li>Format: 1-100 characters, alphanumeric + hyphens, must start with letter</li> <li>Examples: <code>customer-support</code>, <code>code-reviewer</code>, <code>data-analyzer</code></li> </ul> <pre><code>name: customer-support\n</code></pre>"},{"location":"guides/agent-configuration/#agent-description","title":"Agent Description","text":"<ul> <li>Required: No</li> <li>Type: String</li> <li>Constraints: Max 500 characters</li> <li>Purpose: Describe what this agent does for documentation</li> </ul> <pre><code>description: Handles customer support queries with ticket creation\n</code></pre>"},{"location":"guides/agent-configuration/#agent-author","title":"Agent Author","text":"<ul> <li>Required: No</li> <li>Type: String</li> <li>Constraints: Max 256 characters</li> <li>Purpose: Document who created or maintains this agent</li> </ul> <pre><code>author: \"Alice Johnson\"\n</code></pre> <p>This field is useful for: - Attribution and credit in multi-team environments - Understanding who to contact for questions about the agent - Tracking agent ownership and maintenance responsibility</p>"},{"location":"guides/agent-configuration/#model-configuration","title":"Model Configuration","text":"<p>Defines which LLM provider and model to use.</p>"},{"location":"guides/agent-configuration/#provider-field","title":"Provider Field","text":"<ul> <li>Required: Yes</li> <li>Type: String (Enum)</li> <li>Options:</li> <li><code>openai</code> - OpenAI API (GPT-4o, GPT-4o-mini, etc.)</li> <li><code>azure_openai</code> - Azure OpenAI Service</li> <li><code>anthropic</code> - Anthropic Claude</li> </ul> <pre><code>model:\n  provider: openai\n</code></pre>"},{"location":"guides/agent-configuration/#model-name","title":"Model Name","text":"<ul> <li>Required: Yes</li> <li>Type: String</li> <li>Purpose: Identifies specific model within provider</li> <li>Examples by Provider:</li> <li>OpenAI: <code>gpt-4o</code>, <code>gpt-4o-mini</code>, <code>gpt-4-turbo</code></li> <li>Azure: <code>gpt-4</code>, <code>gpt-4-32k</code></li> <li>Anthropic: <code>claude-3-opus</code>, <code>claude-3-sonnet</code>, <code>claude-3-haiku</code></li> </ul> <pre><code>model:\n  name: gpt-4o\n</code></pre>"},{"location":"guides/agent-configuration/#temperature","title":"Temperature","text":"<ul> <li>Optional: Yes</li> <li>Type: Float</li> <li>Range: 0.0 to 2.0</li> <li>Default: 0.7 (if not specified)</li> <li>Meaning:</li> <li><code>0.0</code> - Deterministic, focused responses</li> <li><code>0.7</code> - Balanced randomness</li> <li><code>1.5+</code> - Very creative, random responses</li> </ul> <pre><code>model:\n  temperature: 0.8  # More creative\n</code></pre>"},{"location":"guides/agent-configuration/#max-tokens","title":"Max Tokens","text":"<ul> <li>Optional: Yes</li> <li>Type: Integer</li> <li>Constraint: Must be positive</li> <li>Purpose: Limit maximum length of generated responses</li> </ul> <pre><code>model:\n  max_tokens: 4000\n</code></pre>"},{"location":"guides/agent-configuration/#top-p","title":"Top P","text":"<ul> <li>Optional: Yes</li> <li>Type: Float</li> <li>Range: 0.0 to 1.0</li> <li>Purpose: Nucleus sampling (alternative to temperature)</li> </ul> <pre><code>model:\n  top_p: 0.9\n</code></pre>"},{"location":"guides/agent-configuration/#instructions","title":"Instructions","text":"<p>Defines the system prompt that guides agent behavior.</p>"},{"location":"guides/agent-configuration/#inline-instructions","title":"Inline Instructions","text":"<p>Embed the prompt directly in <code>agent.yaml</code>:</p> <pre><code>instructions:\n  inline: |\n    You are a customer support specialist.\n\n    Guidelines:\n    - Be polite and professional\n    - Provide accurate information\n    - Escalate complex issues to supervisors\n</code></pre>"},{"location":"guides/agent-configuration/#file-based-instructions","title":"File-Based Instructions","text":"<p>Reference an external file (path relative to <code>agent.yaml</code>):</p> <pre><code>instructions:\n  file: system_prompt.txt\n</code></pre> <p>File at <code>system_prompt.txt</code>:</p> <pre><code>You are a customer support specialist.\n\nGuidelines:\n- Be polite and professional\n- Provide accurate information\n- Escalate complex issues to supervisors\n</code></pre>"},{"location":"guides/agent-configuration/#rules","title":"Rules","text":"<ul> <li>Exactly one required: Either <code>inline</code> OR <code>file</code>, not both</li> <li>Max length (inline): 5000 characters</li> <li>File path: Relative to <code>agent.yaml</code> directory (see File References guide)</li> </ul>"},{"location":"guides/agent-configuration/#tools","title":"Tools","text":"<p>Define capabilities the agent can use. See the Tools Reference Guide for detailed documentation.</p> <pre><code>tools:\n  - name: search-docs\n    description: Search company documentation\n    type: vectorstore\n    source: docs/\n\n  - name: get-user\n    description: Retrieve user information\n    type: function\n    file: tools/user_tools.py\n    function: get_user\n\n  - name: file-system\n    description: File system access\n    type: mcp\n    server: \"@modelcontextprotocol/server-filesystem\"\n    config:\n      allowed_directories: [\"/data\", \"/tmp\"]\n\n  - name: summarize\n    description: Summarize text\n    type: prompt\n    template: \"Summarize this in 2-3 sentences: {{text}}\"\n    parameters:\n      text:\n        type: string\n        description: Text to summarize\n</code></pre>"},{"location":"guides/agent-configuration/#tool-constraints","title":"Tool Constraints","text":"<ul> <li>Max tools: 50 per agent</li> <li>Tool names: Must be unique, alphanumeric + underscores</li> <li>Required fields: <code>name</code>, <code>description</code>, <code>type</code></li> </ul>"},{"location":"guides/agent-configuration/#evaluations","title":"Evaluations","text":"<p>Defines metrics to measure agent quality. See the Evaluations Guide for details.</p> <pre><code>evaluations:\n  model:  # Optional: default model for all metrics\n    provider: openai\n    name: gpt-4o\n\n  metrics:\n    - metric: groundedness\n      threshold: 0.8\n      enabled: true\n\n    - metric: relevance\n      threshold: 0.75\n</code></pre>"},{"location":"guides/agent-configuration/#test-cases","title":"Test Cases","text":"<p>Defines scenarios to validate agent behavior.</p> <pre><code>test_cases:\n  - name: \"Support request\"\n    input: \"How do I reset my password?\"\n    expected_tools: [search-docs]\n    ground_truth: \"Instructions for password reset\"\n\n  - input: \"What are your hours?\"\n    expected_tools: []\n</code></pre>"},{"location":"guides/agent-configuration/#test-case-fields","title":"Test Case Fields","text":"<ul> <li>name: Test identifier (optional)</li> <li>input: User query (required, max 5000 chars)</li> <li>expected_tools: Tools that should be called (optional)</li> <li>ground_truth: Expected response for comparison (optional)</li> <li>files: Multimodal inputs like images, PDFs (optional, max 10 per test)</li> </ul>"},{"location":"guides/agent-configuration/#constraints","title":"Constraints","text":"<ul> <li>Max test cases: 100 per agent</li> <li>Test names: Must be unique if provided</li> </ul>"},{"location":"guides/agent-configuration/#complete-example","title":"Complete Example","text":"<pre><code>name: support-agent\ndescription: Handles customer support queries with knowledge base search\n\nmodel:\n  provider: openai\n  name: gpt-4o\n  temperature: 0.7\n  max_tokens: 2000\n\ninstructions:\n  file: system_prompt.txt\n\ntools:\n  - name: search-kb\n    description: Search knowledge base\n    type: vectorstore\n    source: knowledge_base.json\n    chunk_size: 500\n\n  - name: create-ticket\n    description: Create support ticket\n    type: function\n    file: tools/support.py\n    function: create_ticket\n    parameters:\n      title:\n        type: string\n        description: Ticket title\n      priority:\n        type: string\n        description: low|medium|high\n\nevaluations:\n  metrics:\n    - metric: groundedness\n      threshold: 0.8\n\ntest_cases:\n  - name: \"Password reset\"\n    input: \"How do I reset my password?\"\n    expected_tools: [search-kb]\n    ground_truth: \"Step-by-step password reset instructions\"\n\n  - name: \"Open ticket\"\n    input: \"I need help with my account\"\n    expected_tools: [search-kb, create-ticket]\n</code></pre>"},{"location":"guides/agent-configuration/#validation-rules","title":"Validation Rules","text":""},{"location":"guides/agent-configuration/#required-fields","title":"Required Fields","text":"<ul> <li><code>name</code>: Must be provided</li> <li><code>model.provider</code>: Must be provided and valid</li> <li><code>model.name</code>: Must be provided</li> <li><code>instructions</code>: Must have either <code>inline</code> or <code>file</code></li> </ul>"},{"location":"guides/agent-configuration/#mutual-exclusivity","title":"Mutual Exclusivity","text":"<ul> <li>Instructions: Either <code>inline</code> OR <code>file</code>, not both</li> <li>Prompt tools: Either <code>template</code> OR <code>file</code>, not both</li> </ul>"},{"location":"guides/agent-configuration/#ranges","title":"Ranges","text":"<ul> <li>Temperature: 0.0 to 2.0</li> <li>Max tokens: Must be &gt; 0</li> <li>Tool limit: Max 50 per agent</li> <li>Test cases: Max 100 per agent</li> </ul>"},{"location":"guides/agent-configuration/#file-references","title":"File References","text":"<ul> <li>Paths are relative to <code>agent.yaml</code> directory</li> <li>Files must exist (checked during loading)</li> <li>Absolute paths are supported</li> </ul>"},{"location":"guides/agent-configuration/#environment-variables","title":"Environment Variables","text":"<p>Replace sensitive values with environment variables:</p> <pre><code>model:\n  provider: openai\n  name: gpt-4o\n  # API key from environment, see global config guide\n</code></pre> <p>See the Global Configuration Guide for environment variable interpolation details.</p>"},{"location":"guides/agent-configuration/#common-patterns","title":"Common Patterns","text":""},{"location":"guides/agent-configuration/#minimal-agent-inline-instructions","title":"Minimal Agent (Inline Instructions)","text":"<pre><code>name: simple-agent\n\nmodel:\n  provider: openai\n  name: gpt-4o\n\ninstructions:\n  inline: \"You are a helpful assistant.\"\n</code></pre>"},{"location":"guides/agent-configuration/#agent-with-file-references","title":"Agent with File References","text":"<pre><code>name: documented-agent\n\nmodel:\n  provider: azure_openai\n  name: gpt-4\n\ninstructions:\n  file: prompts/system.txt\n\ntools:\n  - name: search\n    type: vectorstore\n    source: data/docs.json\n</code></pre>"},{"location":"guides/agent-configuration/#full-featured-agent","title":"Full-Featured Agent","text":"<pre><code>name: enterprise-agent\ndescription: Production-ready support agent\n\nmodel:\n  provider: openai\n  name: gpt-4o\n  temperature: 0.6\n  max_tokens: 4096\n\ninstructions:\n  file: system_prompt.txt\n\ntools:\n  - name: knowledge-base\n    type: vectorstore\n    source: kb/\n  - name: system-check\n    type: function\n    file: tools/system.py\n    function: check_status\n  - name: external-api\n    type: mcp\n    server: \"custom-server\"\n\nevaluations:\n  model:\n    provider: openai\n    name: gpt-4o\n  metrics:\n    - metric: groundedness\n      threshold: 0.85\n    - metric: safety\n      threshold: 0.9\n\ntest_cases:\n  - name: \"Basic query\"\n    input: \"Hello, can you help?\"\n    expected_tools: [knowledge-base]\n</code></pre>"},{"location":"guides/agent-configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/agent-configuration/#error-name-is-required","title":"Error: \"name is required\"","text":"<ul> <li>Add <code>name</code> field at top level</li> </ul>"},{"location":"guides/agent-configuration/#error-instructions-either-file-or-inline-must-be-provided","title":"Error: \"instructions: Either file or inline must be provided\"","text":"<ul> <li>Ensure instructions section has either <code>inline</code> or <code>file</code> field</li> </ul>"},{"location":"guides/agent-configuration/#error-instruction-file-not-found","title":"Error: \"instruction file not found\"","text":"<ul> <li>Check file path is correct and relative to <code>agent.yaml</code> directory</li> <li>Use absolute paths if needed</li> </ul>"},{"location":"guides/agent-configuration/#error-invalid-model-provider","title":"Error: \"Invalid model provider\"","text":"<ul> <li>Use valid provider: <code>openai</code>, <code>azure_openai</code>, or <code>anthropic</code></li> </ul>"},{"location":"guides/agent-configuration/#error-tool-name-must-be-unique","title":"Error: \"Tool name must be unique\"","text":"<ul> <li>Each tool must have a unique <code>name</code> field</li> </ul>"},{"location":"guides/agent-configuration/#next-steps","title":"Next Steps","text":"<ul> <li>See Tools Reference for tool configuration details</li> <li>See Evaluations Guide for quality metrics</li> <li>See Global Configuration for shared settings</li> <li>See File References for path resolution</li> </ul>"},{"location":"guides/evaluations/","title":"Evaluations Guide","text":"<p>This guide explains HoloDeck's evaluation system for measuring agent quality.</p>"},{"location":"guides/evaluations/#overview","title":"Overview","text":"<p>Evaluations measure how well your agent performs. You define metrics in <code>agent.yaml</code> to automatically grade agent responses against test cases.</p> <p>HoloDeck supports two categories of metrics:</p> <ol> <li>AI-Powered Metrics - LLM-evaluated (groundedness, relevance, coherence, safety)</li> <li>NLP Metrics - Text comparison (F1, BLEU, ROUGE, METEOR)</li> </ol>"},{"location":"guides/evaluations/#basic-structure","title":"Basic Structure","text":"<pre><code>evaluations:\n  model:      # Optional: Default LLM for evaluation\n    provider: openai\n    name: gpt-4o\n\n  metrics:    # Required: Metrics to compute\n    - metric: groundedness\n      threshold: 0.8\n      enabled: true\n</code></pre>"},{"location":"guides/evaluations/#configuration-levels","title":"Configuration Levels","text":"<p>Model configuration for evaluations works at three levels (priority order):</p>"},{"location":"guides/evaluations/#level-1-per-metric-override-highest-priority","title":"Level 1: Per-Metric Override (Highest Priority)","text":"<p>Override model for a specific metric:</p> <pre><code>evaluations:\n  metrics:\n    - metric: groundedness\n      model:                    # Uses this model for this metric only\n        provider: openai\n        name: gpt-4\n</code></pre>"},{"location":"guides/evaluations/#level-2-evaluation-wide-model","title":"Level 2: Evaluation-Wide Model","text":"<p>Default for all metrics without override:</p> <pre><code>evaluations:\n  model:                        # Uses for all metrics\n    provider: openai\n    name: gpt-4\n\n  metrics:\n    - metric: groundedness\n      # Uses evaluation.model above\n    - metric: relevance\n      # Also uses evaluation.model above\n</code></pre>"},{"location":"guides/evaluations/#level-3-agent-model-lowest-priority","title":"Level 3: Agent Model (Lowest Priority)","text":"<p>Used if neither Level 1 nor Level 2 specified:</p> <pre><code>model:                          # Agent's main model\n  provider: openai\n  name: gpt-4o\n\nevaluations:\n  metrics:\n    - metric: groundedness\n      # Falls back to agent.model above\n</code></pre>"},{"location":"guides/evaluations/#ai-powered-metrics","title":"AI-Powered Metrics","text":"<p>These metrics use an LLM to evaluate responses.</p>"},{"location":"guides/evaluations/#groundedness","title":"Groundedness","text":"<p>Measures how well the response is supported by the source material.</p> <pre><code>- metric: groundedness\n  threshold: 0.8\n  enabled: true\n</code></pre> <p>Scale: 1-5 (higher is better)</p> <p>What it measures: - Factual accuracy - No hallucinations - Claims are verifiable from sources</p> <p>When to use: When accuracy is critical</p> <p>Example: - \u2705 PASS: Agent cites specific knowledge base articles - \u274c FAIL: Agent makes up company policies</p>"},{"location":"guides/evaluations/#relevance","title":"Relevance","text":"<p>Measures whether the response addresses the user's question.</p> <pre><code>- metric: relevance\n  threshold: 0.75\n</code></pre> <p>Scale: 1-5 (higher is better)</p> <p>What it measures: - Response answers the question - On-topic content - Minimal tangents</p> <p>When to use: For general quality assurance</p> <p>Example: - \u2705 PASS: \"How do I reset my password?\" \u2192 Password reset instructions - \u274c FAIL: \"How do I reset my password?\" \u2192 Company history</p>"},{"location":"guides/evaluations/#coherence","title":"Coherence","text":"<p>Measures how well the response flows and makes sense.</p> <pre><code>- metric: coherence\n  threshold: 0.7\n</code></pre> <p>Scale: 1-5 (higher is better)</p> <p>What it measures: - Clear writing - Logical flow - Proper grammar</p> <p>When to use: For content quality</p>"},{"location":"guides/evaluations/#safety","title":"Safety","text":"<p>Measures whether response is appropriate and avoids harm.</p> <pre><code>- metric: safety\n  threshold: 0.9\n</code></pre> <p>Scale: 1-5 (higher is better)</p> <p>What it measures: - No harmful content - Appropriate tone - No PII leakage</p> <p>When to use: For user safety, PII protection</p>"},{"location":"guides/evaluations/#nlp-metrics","title":"NLP Metrics","text":"<p>These metrics compare response to expected output using text algorithms.</p>"},{"location":"guides/evaluations/#f1-score","title":"F1 Score","text":"<p>Measures precision and recall of token overlap.</p> <pre><code>- metric: f1_score\n  threshold: 0.8\n</code></pre> <p>Scale: 0.0-1.0 (higher is better)</p> <p>What it measures: - Token-level match with ground truth - Balanced precision/recall</p> <p>When to use: When exact word matching is important</p>"},{"location":"guides/evaluations/#bleu-bilingual-evaluation-understudy","title":"BLEU (Bilingual Evaluation Understudy)","text":"<p>Measures n-gram overlap with reference translation.</p> <pre><code>- metric: bleu\n  threshold: 0.6\n</code></pre> <p>Scale: 0.0-1.0 (higher is better)</p> <p>What it measures: - N-gram similarity to reference - Penalizes brevity</p> <p>When to use: For translation, paraphrase evaluation</p>"},{"location":"guides/evaluations/#rouge-recall-oriented-understudy-for-gisting-evaluation","title":"ROUGE (Recall-Oriented Understudy for Gisting Evaluation)","text":"<p>Measures recall of n-grams with reference.</p> <pre><code>- metric: rouge\n  threshold: 0.7\n</code></pre> <p>Scale: 0.0-1.0 (higher is better)</p> <p>What it measures: - Recall of n-grams - Coverage of reference content</p> <p>When to use: For summarization tasks</p>"},{"location":"guides/evaluations/#meteor-metric-for-evaluation-of-translation-with-explicit-ordering","title":"METEOR (Metric for Evaluation of Translation with Explicit Ordering)","text":"<p>Similar to BLEU but with better handling of synonyms.</p> <pre><code>- metric: meteor\n  threshold: 0.65\n</code></pre> <p>Scale: 0.0-1.0 (higher is better)</p> <p>What it measures: - N-gram match with synonyms - Word order</p> <p>When to use: For translation, paraphrase with synonyms</p>"},{"location":"guides/evaluations/#metric-configuration","title":"Metric Configuration","text":""},{"location":"guides/evaluations/#threshold","title":"Threshold","text":"<ul> <li>Type: Float</li> <li>Purpose: Minimum score for test to pass</li> <li>Scale: 1-5 for AI metrics, 0-1 for NLP metrics</li> <li>Optional: Yes (default: no threshold, metric is informational)</li> </ul> <pre><code>- metric: groundedness\n  threshold: 0.8\n</code></pre>"},{"location":"guides/evaluations/#enabled","title":"Enabled","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>true</code></li> <li>Purpose: Temporarily disable metric without removing it</li> </ul> <pre><code>- metric: relevance\n  enabled: false  # Metric runs but doesn't fail test\n</code></pre>"},{"location":"guides/evaluations/#scale","title":"Scale","text":"<ul> <li>Type: Integer</li> <li>Purpose: Scoring scale (e.g., 5 for 1-5 scale)</li> <li>Default: 5 for AI metrics</li> <li>Optional: Yes</li> </ul> <pre><code>- metric: groundedness\n  scale: 10  # 1-10 scale instead of 1-5\n</code></pre>"},{"location":"guides/evaluations/#fail-on-error","title":"Fail on Error","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>false</code> (soft failure)</li> <li>Purpose: Whether to fail test if evaluation errors</li> </ul> <pre><code>- metric: groundedness\n  fail_on_error: false  # Continues even if LLM evaluation fails\n</code></pre>"},{"location":"guides/evaluations/#retry-on-failure","title":"Retry on Failure","text":"<ul> <li>Type: Integer</li> <li>Default: 0</li> <li>Range: 1-3</li> <li>Purpose: Retry LLM evaluation on failure</li> </ul> <pre><code>- metric: groundedness\n  retry_on_failure: 2  # Retry up to 2 times\n</code></pre>"},{"location":"guides/evaluations/#timeout","title":"Timeout","text":"<ul> <li>Type: Integer (milliseconds)</li> <li>Purpose: Maximum time for evaluation</li> <li>Default: No timeout</li> </ul> <pre><code>- metric: groundedness\n  timeout_ms: 30000  # 30 second timeout\n</code></pre>"},{"location":"guides/evaluations/#custom-prompt","title":"Custom Prompt","text":"<ul> <li>Type: String</li> <li>Purpose: Custom evaluation prompt (advanced)</li> <li>Default: Built-in prompt per metric</li> </ul> <pre><code>- metric: groundedness\n  custom_prompt: |\n    Evaluate groundedness on scale 1-5:\n    {{response}}\n    Sources: {{sources}}\n</code></pre>"},{"location":"guides/evaluations/#complete-examples","title":"Complete Examples","text":""},{"location":"guides/evaluations/#basic-evaluation","title":"Basic Evaluation","text":"<pre><code>evaluations:\n  metrics:\n    - metric: groundedness\n      threshold: 0.8\n    - metric: relevance\n      threshold: 0.75\n</code></pre>"},{"location":"guides/evaluations/#with-custom-evaluation-model","title":"With Custom Evaluation Model","text":"<pre><code>evaluations:\n  model:\n    provider: openai\n    name: gpt-4  # Use better model for evaluation\n    temperature: 0.2\n\n  metrics:\n    - metric: groundedness\n      threshold: 0.85\n    - metric: relevance\n      threshold: 0.8\n</code></pre>"},{"location":"guides/evaluations/#with-per-metric-overrides","title":"With Per-Metric Overrides","text":"<pre><code>evaluations:\n  model:\n    provider: openai\n    name: gpt-4o-mini  # Default: faster, cheaper\n\n  metrics:\n    - metric: groundedness\n      threshold: 0.85\n      model:  # Override for critical metric\n        provider: openai\n        name: gpt-4  # Use powerful model\n\n    - metric: relevance\n      threshold: 0.75\n      # Uses evaluation.model above\n\n    - metric: safety\n      threshold: 0.9\n      model:  # Override for critical metric\n        provider: anthropic\n        name: claude-3-opus\n</code></pre>"},{"location":"guides/evaluations/#mixed-ai-and-nlp-metrics","title":"Mixed AI and NLP Metrics","text":"<pre><code>evaluations:\n  model:\n    provider: openai\n    name: gpt-4o\n\n  metrics:\n    # AI metrics\n    - metric: groundedness\n      threshold: 0.8\n\n    - metric: relevance\n      threshold: 0.75\n\n    # NLP metrics\n    - metric: f1_score\n      threshold: 0.7\n\n    - metric: rouge\n      threshold: 0.6\n</code></pre>"},{"location":"guides/evaluations/#comprehensive-enterprise-setup","title":"Comprehensive Enterprise Setup","text":"<pre><code>evaluations:\n  model:\n    provider: openai\n    name: gpt-4o-mini\n    temperature: 0.1  # Consistent evaluation\n\n  metrics:\n    # Critical metrics - use powerful model\n    - metric: safety\n      threshold: 0.95\n      model:\n        provider: openai\n        name: gpt-4\n\n    - metric: groundedness\n      threshold: 0.9\n      model:\n        provider: openai\n        name: gpt-4\n\n    # Standard metrics - use default\n    - metric: relevance\n      threshold: 0.8\n\n    - metric: coherence\n      threshold: 0.75\n\n    # NLP metrics - no LLM needed\n    - metric: f1_score\n      threshold: 0.7\n\n    - metric: rouge\n      threshold: 0.65\n\n    # Disabled metrics - monitoring only\n    - metric: meteor\n      enabled: false\n      threshold: 0.6\n\n    # Soft failure metric\n    - metric: custom_metric\n      fail_on_error: false\n      timeout_ms: 10000\n      retry_on_failure: 1\n</code></pre>"},{"location":"guides/evaluations/#per-test-case-evaluation","title":"Per-Test Case Evaluation","text":"<p>Test cases can specify which metrics to run:</p> <pre><code>test_cases:\n  - name: \"Fact check test\"\n    input: \"What's our company's founding date?\"\n    expected_tools: [search-kb]\n    ground_truth: \"Founded in 2010\"\n    evaluations:\n      - groundedness\n      - relevance\n\n  - name: \"Creative task\"\n    input: \"Generate a company tagline\"\n    evaluations:\n      - coherence\n      - safety\n      # Skip groundedness since no ground truth\n</code></pre>"},{"location":"guides/evaluations/#test-execution","title":"Test Execution","text":"<p>When running tests, HoloDeck:</p> <ol> <li>Executes agent with test input</li> <li>Records which tools were called</li> <li>Validates tool usage (<code>expected_tools</code>)</li> <li>Runs each enabled metric</li> <li>Compares results against thresholds</li> <li>Reports pass/fail per metric</li> </ol>"},{"location":"guides/evaluations/#example-output","title":"Example Output","text":"<pre><code>Test: \"Password Reset\"\nInput: \"How do I reset my password?\"\nTools called: [search-kb] \u2713\nMetrics:\n  \u2713 Groundedness: 0.92 (threshold: 0.8)\n  \u2713 Relevance: 0.88 (threshold: 0.75)\n  \u2713 F1 Score: 0.81 (threshold: 0.7)\nResult: PASS\n</code></pre>"},{"location":"guides/evaluations/#cost-optimization","title":"Cost Optimization","text":""},{"location":"guides/evaluations/#use-right-model-per-metric","title":"Use Right Model per Metric","text":"<pre><code>evaluations:\n  model:\n    provider: openai\n    name: gpt-4o-mini  # Cheap default\n\n  metrics:\n    - metric: groundedness\n      # Uses gpt-4o-mini\n    - metric: safety\n      model:\n        provider: openai\n        name: gpt-4  # Expensive override only for critical metric\n</code></pre>"},{"location":"guides/evaluations/#disable-unnecessary-metrics","title":"Disable Unnecessary Metrics","text":"<pre><code>- metric: meteor\n  enabled: false  # Don't evaluate\n</code></pre>"},{"location":"guides/evaluations/#use-nlp-metrics-when-possible","title":"Use NLP Metrics When Possible","text":"<p>NLP metrics are free (no LLM calls):</p> <pre><code>- metric: f1_score  # No LLM cost\n- metric: rouge     # No LLM cost\n</code></pre>"},{"location":"guides/evaluations/#model-configuration-details","title":"Model Configuration Details","text":"<p>When specifying a model for evaluation:</p> <pre><code>model:\n  provider: openai|azure_openai|anthropic  # Required\n  name: model-identifier                    # Required\n  temperature: 0.0-2.0                      # Optional\n  max_tokens: integer                       # Optional\n  top_p: 0.0-1.0                            # Optional\n</code></pre>"},{"location":"guides/evaluations/#provider-specific-models","title":"Provider-Specific Models","text":"<p>OpenAI - <code>gpt-4o</code> - Latest, best quality - <code>gpt-4o-mini</code> - Fast, cheap - <code>gpt-4-turbo</code> - Previous generation</p> <p>Azure OpenAI - <code>gpt-4</code> - Standard - <code>gpt-4-32k</code> - Extended context</p> <p>Anthropic - <code>claude-3-opus</code> - Most capable - <code>claude-3-sonnet</code> - Balanced - <code>claude-3-haiku</code> - Fast, cheap</p>"},{"location":"guides/evaluations/#recommended-settings-for-evaluation","title":"Recommended Settings for Evaluation","text":"<pre><code>model:\n  provider: openai\n  name: gpt-4o-mini\n  temperature: 0.1  # Low temperature for consistency\n  max_tokens: 2000  # Enough for explanation\n</code></pre>"},{"location":"guides/evaluations/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/evaluations/#error-invalid-metric-type","title":"Error: \"invalid metric type\"","text":"<ul> <li>Check metric name is valid</li> <li>Valid AI metrics: groundedness, relevance, coherence, safety</li> <li>Valid NLP metrics: f1_score, bleu, rouge, meteor</li> </ul>"},{"location":"guides/evaluations/#error-threshold-must-be-valid-for-scale","title":"Error: \"threshold must be valid for scale\"","text":"<ul> <li>For 1-5 scale: Use values like 0.8, 1.5, 2.0, etc.</li> <li>For 0-1 scale: Use values like 0.5, 0.75, 0.9</li> </ul>"},{"location":"guides/evaluations/#metric-always-fails","title":"Metric always fails","text":"<ul> <li>Check evaluation model is working</li> <li>Try without threshold first</li> <li>Test evaluation model manually</li> </ul>"},{"location":"guides/evaluations/#llm-evaluation-too-slow","title":"LLM evaluation too slow","text":"<ul> <li>Use faster model: <code>gpt-4o-mini</code> instead of <code>gpt-4</code></li> <li>Add timeout: <code>timeout_ms: 10000</code></li> <li>Use NLP metrics instead (free)</li> </ul>"},{"location":"guides/evaluations/#inconsistent-evaluation-results","title":"Inconsistent evaluation results","text":"<ul> <li>Increase temperature precision: <code>temperature: 0.1</code></li> <li>Use more powerful model: <code>gpt-4</code> instead of <code>gpt-4o-mini</code></li> <li>Add retry: <code>retry_on_failure: 2</code></li> </ul>"},{"location":"guides/evaluations/#best-practices","title":"Best Practices","text":"<ol> <li>Start Simple: Begin with 1-2 metrics, add more after understanding</li> <li>Use Defaults: Let HoloDeck choose model/scale unless you have specific needs</li> <li>Mix Metric Types: Combine AI metrics (semantic) with NLP (keyword-based)</li> <li>Cost-Aware: Use cheaper models by default, expensive models only for critical metrics</li> <li>Realistic Thresholds: Set thresholds based on actual agent performance</li> <li>Monitor: Run metrics on sample of tests first</li> <li>Iterate: Adjust thresholds and metrics based on results</li> </ol>"},{"location":"guides/evaluations/#next-steps","title":"Next Steps","text":"<ul> <li>See Agent Configuration Guide for how to set up evaluations</li> <li>See Examples for complete evaluation configurations</li> <li>See Global Configuration for shared settings</li> </ul>"},{"location":"guides/file-references/","title":"File References Guide","text":"<p>This guide explains how file paths work in HoloDeck configurations.</p>"},{"location":"guides/file-references/#overview","title":"Overview","text":"<p>HoloDeck uses file references in several places:</p> <ul> <li>Instructions: <code>instructions.file</code> for system prompts</li> <li>Tools: <code>source</code> for vectorstore data, <code>file</code> for function code</li> <li>Prompts: <code>file</code> for template files</li> </ul> <p>This guide explains path resolution rules.</p>"},{"location":"guides/file-references/#path-resolution-rules","title":"Path Resolution Rules","text":""},{"location":"guides/file-references/#rule-1-relative-paths-default","title":"Rule 1: Relative Paths (Default)","text":"<p>Paths are relative to the directory containing agent.yaml:</p> <pre><code>project/\n\u251c\u2500\u2500 agent.yaml          (references below)\n\u251c\u2500\u2500 system_prompt.txt   \u2190 relative path: system_prompt.txt\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 kb.json         \u2190 relative path: data/kb.json\n\u2514\u2500\u2500 tools/\n    \u2514\u2500\u2500 search.py       \u2190 relative path: tools/search.py\n</code></pre> <p>Usage in <code>agent.yaml</code>:</p> <pre><code># From project/agent.yaml\n\ninstructions:\n  file: system_prompt.txt        # Resolves to: project/system_prompt.txt\n\ntools:\n  - type: vectorstore\n    source: data/kb.json         # Resolves to: project/data/kb.json\n\n  - type: function\n    file: tools/search.py        # Resolves to: project/tools/search.py\n</code></pre>"},{"location":"guides/file-references/#rule-2-absolute-paths","title":"Rule 2: Absolute Paths","text":"<p>Paths starting with <code>/</code> are absolute:</p> <pre><code>instructions:\n  file: /etc/holodeck/system_prompt.txt  # Absolute path\n\ntools:\n  - type: vectorstore\n    source: /data/knowledge_base/        # Absolute path\n</code></pre>"},{"location":"guides/file-references/#rule-3-home-directory-expansion","title":"Rule 3: Home Directory Expansion","text":"<p><code>~</code> expands to user home directory:</p> <pre><code>instructions:\n  file: ~/templates/prompt.txt    # Expands to: /home/user/templates/prompt.txt\n</code></pre> <p>On different systems:</p> <ul> <li>Linux: <code>/home/username/</code></li> <li>macOS: <code>/Users/username/</code></li> <li>Windows: <code>C:\\Users\\username\\</code></li> </ul>"},{"location":"guides/file-references/#common-path-patterns","title":"Common Path Patterns","text":""},{"location":"guides/file-references/#sibling-files","title":"Sibling Files","text":"<p>Instructions in same directory as agent:</p> <pre><code># project/agent.yaml\ninstructions:\n  file: system_prompt.txt\n\n# File: project/system_prompt.txt\n</code></pre>"},{"location":"guides/file-references/#subdirectories","title":"Subdirectories","text":"<p>Tools in subdirectory:</p> <pre><code># project/agent.yaml\ntools:\n  - type: function\n    file: tools/my_tool.py\n\n# File: project/tools/my_tool.py\n</code></pre>"},{"location":"guides/file-references/#parent-directory","title":"Parent Directory","text":"<p>Reference parent directory with <code>..</code>:</p> <pre><code># project/agents/support/agent.yaml\ninstructions:\n  file: ../../shared/system_prompt.txt\n\n# File: project/shared/system_prompt.txt\n</code></pre>"},{"location":"guides/file-references/#deeply-nested","title":"Deeply Nested","text":"<p>Multiple levels:</p> <pre><code># project/agents/v2/beta/agent.yaml\ntools:\n  - type: vectorstore\n    source: ../../../../data/kb/\n\n# File: project/data/kb/\n</code></pre>"},{"location":"guides/file-references/#validation","title":"Validation","text":"<p>HoloDeck validates file paths during configuration loading:</p>"},{"location":"guides/file-references/#validation-rules","title":"Validation Rules","text":"<ol> <li>File must exist: Checked when agent loads</li> <li>Readable: File must be readable by current user</li> <li>Type checking: File type must match context</li> <li>Instructions: Text file (<code>.txt</code>, <code>.md</code>, etc.)</li> <li>Vectorstore: Data file or directory</li> <li>Function: Python file (<code>.py</code>)</li> <li>Prompt: Text file</li> </ol>"},{"location":"guides/file-references/#validation-errors","title":"Validation Errors","text":"<pre><code>Error: File not found\nPath: tools/search.py\nExpected at: /home/user/project/tools/search.py\nSuggestions:\n- Check file exists in project directory\n- Use relative path from agent.yaml directory\n- Use absolute path if outside project\n</code></pre>"},{"location":"guides/file-references/#examples-by-file-type","title":"Examples by File Type","text":""},{"location":"guides/file-references/#instructions-file","title":"Instructions File","text":"<p>Structure:</p> <pre><code>project/\n\u251c\u2500\u2500 agent.yaml\n\u2514\u2500\u2500 system_prompt.txt\n</code></pre> <p>agent.yaml:</p> <pre><code>name: my-agent\n\ninstructions:\n  file: system_prompt.txt\n</code></pre> <p>system_prompt.txt:</p> <pre><code>You are a helpful assistant.\nAnswer questions clearly and concisely.\n</code></pre>"},{"location":"guides/file-references/#vectorstore-data-files","title":"Vectorstore Data Files","text":"<p>Structure for single file:</p> <pre><code>project/\n\u251c\u2500\u2500 agent.yaml\n\u2514\u2500\u2500 knowledge_base.json\n</code></pre> <p>agent.yaml:</p> <pre><code>tools:\n  - name: search-kb\n    type: vectorstore\n    source: knowledge_base.json\n</code></pre> <p>Structure for directory:</p> <pre><code>project/\n\u251c\u2500\u2500 agent.yaml\n\u2514\u2500\u2500 data/\n    \u251c\u2500\u2500 doc1.md\n    \u251c\u2500\u2500 doc2.md\n    \u2514\u2500\u2500 doc3.txt\n</code></pre> <p>agent.yaml:</p> <pre><code>tools:\n  - name: search-docs\n    type: vectorstore\n    source: data/\n</code></pre>"},{"location":"guides/file-references/#function-tool-files","title":"Function Tool Files","text":"<p>Structure:</p> <pre><code>project/\n\u251c\u2500\u2500 agent.yaml\n\u2514\u2500\u2500 tools/\n    \u251c\u2500\u2500 search.py\n    \u2514\u2500\u2500 database.py\n</code></pre> <p>agent.yaml:</p> <pre><code>tools:\n  - name: search-function\n    type: function\n    file: tools/search.py\n    function: search_database\n\n  - name: get-user\n    type: function\n    file: tools/database.py\n    function: get_user\n</code></pre>"},{"location":"guides/file-references/#prompt-tool-files","title":"Prompt Tool Files","text":"<p>Structure:</p> <pre><code>project/\n\u251c\u2500\u2500 agent.yaml\n\u2514\u2500\u2500 prompts/\n    \u251c\u2500\u2500 summarize.txt\n    \u2514\u2500\u2500 classify.txt\n</code></pre> <p>agent.yaml:</p> <pre><code>tools:\n  - name: summarize\n    type: prompt\n    file: prompts/summarize.txt\n    parameters:\n      text:\n        type: string\n\n  - name: classify\n    type: prompt\n    file: prompts/classify.txt\n    parameters:\n      text:\n        type: string\n</code></pre>"},{"location":"guides/file-references/#complex-project-structures","title":"Complex Project Structures","text":""},{"location":"guides/file-references/#monorepo-with-multiple-agents","title":"Monorepo with Multiple Agents","text":"<pre><code>project/\n\u251c\u2500\u2500 shared/\n\u2502   \u251c\u2500\u2500 system_prompts/\n\u2502   \u2502   \u251c\u2500\u2500 support.txt\n\u2502   \u2502   \u251c\u2500\u2500 sales.txt\n\u2502   \u2502   \u2514\u2500\u2500 backend.txt\n\u2502   \u251c\u2500\u2500 data/\n\u2502   \u2502   \u251c\u2500\u2500 kb.json\n\u2502   \u2502   \u2514\u2500\u2500 faq.csv\n\u2502   \u2514\u2500\u2500 tools/\n\u2502       \u251c\u2500\u2500 common.py\n\u2502       \u251c\u2500\u2500 database.py\n\u2502       \u2514\u2500\u2500 api.py\n\u251c\u2500\u2500 agents/\n\u2502   \u251c\u2500\u2500 support/\n\u2502   \u2502   \u2514\u2500\u2500 agent.yaml\n\u2502   \u251c\u2500\u2500 sales/\n\u2502   \u2502   \u2514\u2500\u2500 agent.yaml\n\u2502   \u2514\u2500\u2500 backend/\n\u2502       \u2514\u2500\u2500 agent.yaml\n</code></pre> <p>Support agent config:</p> <pre><code># agents/support/agent.yaml\n\ninstructions:\n  file: ../../shared/system_prompts/support.txt\n\ntools:\n  - name: search-kb\n    type: vectorstore\n    source: ../../shared/data/kb.json\n\n  - name: query-db\n    type: function\n    file: ../../shared/tools/database.py\n    function: query\n</code></pre>"},{"location":"guides/file-references/#shared-templates-directory","title":"Shared Templates Directory","text":"<pre><code>project/\n\u251c\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 system_prompt.txt\n\u2502   \u2514\u2500\u2500 prompts/\n\u2502       \u251c\u2500\u2500 summarize.txt\n\u2502       \u2514\u2500\u2500 analyze.txt\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 kb/\n\u2514\u2500\u2500 agents/\n    \u2514\u2500\u2500 agent.yaml\n</code></pre> <p>Agent config:</p> <pre><code># agents/agent.yaml\n\ninstructions:\n  file: ../templates/system_prompt.txt\n\ntools:\n  - name: search\n    type: vectorstore\n    source: ../data/kb/\n\n  - name: summarize\n    type: prompt\n    file: ../templates/prompts/summarize.txt\n    parameters:\n      text:\n        type: string\n</code></pre>"},{"location":"guides/file-references/#environment-variables-in-paths","title":"Environment Variables in Paths","text":"<p>Paths can include environment variables:</p> <pre><code>instructions:\n  file: ${TEMPLATE_DIR}/system_prompt.txt\n\ntools:\n  - type: vectorstore\n    source: ${DATA_DIR}/knowledge_base/\n</code></pre> <p>Environment setup:</p> <pre><code>export TEMPLATE_DIR=/home/user/templates\nexport DATA_DIR=/home/user/data\n</code></pre> <p>Result:</p> <pre><code>instructions.file \u2192 /home/user/templates/system_prompt.txt\ntools[0].source \u2192 /home/user/data/knowledge_base/\n</code></pre>"},{"location":"guides/file-references/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/file-references/#error-file-not-found","title":"Error: \"File not found\"","text":"<p>Problem: File doesn't exist at specified path</p> <p>Solutions:</p> <ol> <li> <p>Check file exists in filesystem:    <pre><code>ls -la project/system_prompt.txt\n</code></pre></p> </li> <li> <p>Verify path is relative to agent.yaml directory:    <pre><code>agent.yaml location: /home/user/project/\nreferenced file: system_prompt.txt\nexpected location: /home/user/project/system_prompt.txt\n</code></pre></p> </li> <li> <p>Check absolute path if using one:    <pre><code>ls -la /full/path/to/file.txt\n</code></pre></p> </li> <li> <p>Expand environment variables manually:    <pre><code>echo \"${TEMPLATE_DIR}/system_prompt.txt\"\n</code></pre></p> </li> </ol>"},{"location":"guides/file-references/#error-permission-denied","title":"Error: \"Permission denied\"","text":"<p>Problem: File exists but not readable</p> <p>Solutions:</p> <ol> <li> <p>Check file permissions:    <pre><code>ls -la project/system_prompt.txt\n# Should have read permission for current user\n</code></pre></p> </li> <li> <p>Make file readable:    <pre><code>chmod 644 project/system_prompt.txt\n</code></pre></p> </li> <li> <p>Check directory permissions:    <pre><code>chmod 755 project/\n</code></pre></p> </li> </ol>"},{"location":"guides/file-references/#error-invalid-file-type","title":"Error: \"Invalid file type\"","text":"<p>Problem: File format doesn't match context</p> <p>Solutions:</p> <ol> <li>For instructions: Use text files (<code>.txt</code>, <code>.md</code>)</li> <li>For vectorstore: Use data files (<code>.json</code>, <code>.csv</code>, <code>.md</code>) or directories</li> <li>For function tools: Use Python files (<code>.py</code>)</li> <li>For prompts: Use text files (<code>.txt</code>, <code>.md</code>)</li> </ol>"},{"location":"guides/file-references/#error-path-traversal-outside-project","title":"Error: \"Path traversal outside project\"","text":"<p>Problem: Path goes outside allowed directory</p> <p>Solutions:</p> <ol> <li> <p>Use absolute paths for files outside project:    <pre><code>instructions:\n  file: /etc/holodeck/system_prompt.txt\n</code></pre></p> </li> <li> <p>Or relative path if within allowed scope:    <pre><code>instructions:\n  file: ../../shared/prompt.txt\n</code></pre></p> </li> </ol>"},{"location":"guides/file-references/#path-not-expanding-environment-variable","title":"Path Not Expanding (Environment Variable)","text":"<p>Problem: <code>${VAR}</code> not replaced with actual value</p> <p>Solutions:</p> <ol> <li> <p>Check variable is exported:    <pre><code>export TEMPLATE_DIR=/path/to/templates\n</code></pre></p> </li> <li> <p>Not just set locally:    <pre><code># Wrong:\nTEMPLATE_DIR=/path/to/templates\nholodeck test agent.yaml\n\n# Right:\nexport TEMPLATE_DIR=/path/to/templates\nholodeck test agent.yaml\n</code></pre></p> </li> <li> <p>Or use absolute path instead:    <pre><code>instructions:\n  file: /path/to/templates/system_prompt.txt\n</code></pre></p> </li> </ol>"},{"location":"guides/file-references/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use Relative Paths: Keep agents portable across machines    <pre><code>instructions:\n  file: system_prompt.txt  # Good\n  # NOT: file: /home/user/project/system_prompt.txt\n</code></pre></p> </li> <li> <p>Organize by Type: Group related files    <pre><code>project/\n\u251c\u2500\u2500 prompts/          \u2190 All prompt templates\n\u251c\u2500\u2500 data/             \u2190 All data files\n\u251c\u2500\u2500 tools/            \u2190 All function tools\n\u2514\u2500\u2500 agent.yaml\n</code></pre></p> </li> <li> <p>Document Structure: Include README    <pre><code>project/\n\u251c\u2500\u2500 README.md         \u2190 Explain file structure\n\u251c\u2500\u2500 agent.yaml\n\u251c\u2500\u2500 system_prompt.txt\n\u2514\u2500\u2500 ...\n</code></pre></p> </li> <li> <p>Use Consistent Naming: Predictable organization    <pre><code>project/\n\u251c\u2500\u2500 prompts/          \u2190 Not prompt/ or system_prompts/\n\u251c\u2500\u2500 tools/            \u2190 Not tool/ or functions/\n\u2514\u2500\u2500 data/             \u2190 Not database/ or knowledge_base/\n</code></pre></p> </li> <li> <p>Don't Hardcode Paths: Use environment variables or global config    <pre><code># Wrong:\ninstructions:\n  file: /Users/john/project/system_prompt.txt\n\n# Right:\ninstructions:\n  file: system_prompt.txt\n</code></pre></p> </li> <li> <p>Verify on Startup: HoloDeck checks all paths when agent loads</p> </li> <li>No runtime surprises</li> <li>Errors caught early</li> </ol>"},{"location":"guides/file-references/#next-steps","title":"Next Steps","text":"<ul> <li>See Agent Configuration Guide for usage examples</li> <li>See Global Configuration Guide for environment variables</li> <li>See Tools Reference for specific tool file requirements</li> </ul>"},{"location":"guides/global-config/","title":"Global Configuration Guide","text":"<p>This guide explains HoloDeck's global configuration system for shared settings across agents.</p>"},{"location":"guides/global-config/#overview","title":"Overview","text":"<p>Global configuration lives at <code>~/.holodeck/config.yaml</code> and provides default settings that apply to all agents. Use global config to:</p> <ul> <li>Set default LLM providers and credentials</li> <li>Define reusable vectorstore connections</li> <li>Configure deployment defaults</li> <li>Store API keys securely</li> <li>Reduce duplication across agent.yaml files</li> </ul>"},{"location":"guides/global-config/#basic-structure","title":"Basic Structure","text":"<pre><code># ~/.holodeck/config.yaml\n\nproviders:\n  openai:\n    api_key: ${OPENAI_API_KEY}\n    organization: my-org\n\nvectorstores:\n  default:\n    embedding_model: text-embedding-3-small\n\ndeployment:\n  default_port: 8000\n</code></pre>"},{"location":"guides/global-config/#configuration-precedence","title":"Configuration Precedence","text":"<p>When multiple configuration sources define the same setting, HoloDeck applies them in priority order:</p> <pre><code>1. agent.yaml (Highest Priority)\n   \u251c\u2500 Explicit values in agent configuration\n   \u2502\n2. Environment Variables (Medium Priority)\n   \u251c\u2500 ${VAR_NAME} patterns in agent.yaml or global config\n   \u2502\n3. ~/.holodeck/config.yaml (Lowest Priority)\n   \u2514\u2500 Global defaults\n</code></pre>"},{"location":"guides/global-config/#precedence-diagram","title":"Precedence Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   agent.yaml explicit   \u2502  Takes precedence\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Environment variables  \u2502  Used if agent.yaml absent\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ~/.holodeck/config.yaml \u2502  Fallback default\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"guides/global-config/#examples","title":"Examples","text":""},{"location":"guides/global-config/#example-1-provider-override","title":"Example 1: Provider Override","text":"<p>Global config: <pre><code>providers:\n  openai:\n    model: gpt-4o-mini\n    temperature: 0.7\n</code></pre></p> <p>Agent config: <pre><code>model:\n  provider: openai\n  name: gpt-4o       # Overrides global default\n  temperature: 0.5   # Overrides global default\n</code></pre></p> <p>Result: Agent uses <code>gpt-4o</code> at temperature <code>0.5</code> (agent config wins)</p>"},{"location":"guides/global-config/#example-2-environment-variable","title":"Example 2: Environment Variable","text":"<p>Global config: <pre><code>providers:\n  openai:\n    api_key: ${OPENAI_API_KEY}\n</code></pre></p> <p>Agent config: <pre><code>model:\n  provider: openai\n</code></pre></p> <p>Environment: <pre><code>export OPENAI_API_KEY=\"sk-...\"\n</code></pre></p> <p>Result: Uses environment variable for API key</p>"},{"location":"guides/global-config/#example-3-full-precedence-chain","title":"Example 3: Full Precedence Chain","text":"<p>Global config: <pre><code>providers:\n  default_model: gpt-4o-mini\n\ndeployment:\n  default_port: 8000\n</code></pre></p> <p>Agent config: <pre><code>model:\n  provider: openai\n  # No explicit temperature\n\ndeployment:\n  port: 8080  # Overrides global\n</code></pre></p> <p>Environment: <pre><code>export TEMPERATURE=0.5\n</code></pre></p> <p>Result: Model uses <code>gpt-4o-mini</code>, port is <code>8080</code>, temperature is <code>0.5</code></p>"},{"location":"guides/global-config/#providers-section","title":"Providers Section","text":"<p>Defines LLM provider credentials and defaults.</p> <pre><code>providers:\n  openai:\n    api_key: ${OPENAI_API_KEY}\n    organization: my-org\n    model: gpt-4o\n    temperature: 0.7\n\n  azure_openai:\n    api_key: ${AZURE_OPENAI_KEY}\n    api_version: 2024-02-01\n    deployment_id: my-deployment\n    endpoint: https://my-resource.openai.azure.com/\n\n  anthropic:\n    api_key: ${ANTHROPIC_API_KEY}\n</code></pre>"},{"location":"guides/global-config/#openai-provider","title":"OpenAI Provider","text":"<pre><code>providers:\n  openai:\n    api_key: ${OPENAI_API_KEY}              # Required\n    organization: my-org                    # Optional\n    model: gpt-4o                           # Optional: default model\n    temperature: 0.7                        # Optional: default temperature\n</code></pre>"},{"location":"guides/global-config/#azure-openai-provider","title":"Azure OpenAI Provider","text":"<pre><code>providers:\n  azure_openai:\n    api_key: ${AZURE_OPENAI_KEY}            # Required\n    endpoint: https://my-resource.openai.azure.com/  # Required\n    api_version: 2024-02-01                 # Required\n    deployment_id: my-deployment            # Required\n</code></pre>"},{"location":"guides/global-config/#anthropic-provider","title":"Anthropic Provider","text":"<pre><code>providers:\n  anthropic:\n    api_key: ${ANTHROPIC_API_KEY}           # Required\n    model: claude-3-opus                    # Optional: default model\n</code></pre>"},{"location":"guides/global-config/#vectorstores-section","title":"Vectorstores Section","text":"<p>Defines reusable vectorstore configurations.</p> <pre><code>vectorstores:\n  default:\n    embedding_model: text-embedding-3-small\n    chunk_size: 512\n    chunk_overlap: 50\n\n  large_docs:\n    embedding_model: text-embedding-3-large\n    chunk_size: 2048\n    chunk_overlap: 256\n\n  structured_data:\n    embedding_model: text-embedding-3-small\n    meta_fields: [title, source, date]\n</code></pre> <p>These can be referenced in agent config (future enhancement).</p>"},{"location":"guides/global-config/#deployment-section","title":"Deployment Section","text":"<p>Defines deployment defaults.</p> <pre><code>deployment:\n  default_port: 8000\n  host: 0.0.0.0\n  workers: 4\n  timeout: 30\n</code></pre>"},{"location":"guides/global-config/#fields","title":"Fields","text":"<ul> <li>default_port: Port for local API server</li> <li>host: Bind address (0.0.0.0 for all interfaces)</li> <li>workers: Number of worker processes</li> <li>timeout: Request timeout in seconds</li> </ul>"},{"location":"guides/global-config/#environment-variables","title":"Environment Variables","text":"<p>Replace sensitive values with environment variables using <code>${VAR_NAME}</code> syntax:</p> <pre><code>providers:\n  openai:\n    api_key: ${OPENAI_API_KEY}      # Reads from environment\n    organization: my-org             # Literal value\n</code></pre>"},{"location":"guides/global-config/#setting-environment-variables","title":"Setting Environment Variables","text":"<p>On Linux/macOS:</p> <pre><code>export OPENAI_API_KEY=\"sk-...\"\nexport ANTHROPIC_API_KEY=\"sk-ant-...\"\n</code></pre> <p>On Windows:</p> <pre><code>set OPENAI_API_KEY=sk-...\nset ANTHROPIC_API_KEY=sk-ant-...\n</code></pre> <p>In .env file (automatic loading):</p> <p>Create <code>.env</code> in project directory:</p> <pre><code>OPENAI_API_KEY=sk-...\nANTHROPIC_API_KEY=sk-ant-...\n</code></pre> <p>HoloDeck automatically loads <code>.env</code> file if present.</p>"},{"location":"guides/global-config/#variable-precedence","title":"Variable Precedence","text":"<p>For <code>${VARIABLE_NAME}</code>:</p> <ol> <li>Check environment variable</li> <li>Check .env file</li> <li>Return empty string if not found (error at agent runtime)</li> </ol>"},{"location":"guides/global-config/#file-locations","title":"File Locations","text":""},{"location":"guides/global-config/#default-location","title":"Default Location","text":"<pre><code>~/.holodeck/config.yaml\n</code></pre> <p>On different operating systems:</p> <ul> <li>Linux: <code>/home/username/.holodeck/config.yaml</code></li> <li>macOS: <code>/Users/username/.holodeck/config.yaml</code></li> <li>Windows: <code>C:\\Users\\username\\.holodeck\\config.yaml</code></li> </ul>"},{"location":"guides/global-config/#custom-location-future","title":"Custom Location (Future)","text":"<pre><code>holodeck --config /path/to/custom.yaml ...\n</code></pre>"},{"location":"guides/global-config/#complete-example","title":"Complete Example","text":"<pre><code># ~/.holodeck/config.yaml\n\n# LLM Provider Credentials\nproviders:\n  openai:\n    api_key: ${OPENAI_API_KEY}\n    organization: acme-corp\n    model: gpt-4o\n    temperature: 0.7\n\n  azure_openai:\n    api_key: ${AZURE_OPENAI_KEY}\n    endpoint: https://acme-openai.openai.azure.com/\n    api_version: 2024-02-01\n    deployment_id: gpt-4-deployment\n\n  anthropic:\n    api_key: ${ANTHROPIC_API_KEY}\n    model: claude-3-sonnet\n\n# Vectorstore Configurations\nvectorstores:\n  default:\n    embedding_model: text-embedding-3-small\n    chunk_size: 512\n    chunk_overlap: 50\n\n  large:\n    embedding_model: text-embedding-3-large\n    chunk_size: 2048\n    chunk_overlap: 256\n\n  pdf_docs:\n    embedding_model: text-embedding-3-small\n    meta_fields: [source, page, date]\n\n# Deployment Defaults\ndeployment:\n  default_port: 8000\n  host: 0.0.0.0\n  workers: 4\n  timeout: 30\n</code></pre>"},{"location":"guides/global-config/#usage-patterns","title":"Usage Patterns","text":""},{"location":"guides/global-config/#pattern-1-secure-api-keys","title":"Pattern 1: Secure API Keys","text":"<p>Keep secrets in global config, reference in agent:</p> <p>Global config: <pre><code># ~/.holodeck/config.yaml\nproviders:\n  openai:\n    api_key: ${OPENAI_API_KEY}\n</code></pre></p> <p>Agent config: <pre><code># my-agent/agent.yaml\nmodel:\n  provider: openai\n  name: gpt-4o\n  # API key comes from global config\n</code></pre></p> <p>Environment: <pre><code>export OPENAI_API_KEY=\"sk-...\"\n</code></pre></p>"},{"location":"guides/global-config/#pattern-2-organization-defaults","title":"Pattern 2: Organization Defaults","text":"<p>Set defaults for your team:</p> <p>Global config: <pre><code># ~/.holodeck/config.yaml\nproviders:\n  openai:\n    organization: acme-corp\n    temperature: 0.7\n    max_tokens: 2000\n</code></pre></p> <p>Agent config: <pre><code># my-agent/agent.yaml\nmodel:\n  provider: openai\n  name: gpt-4o\n  # Uses temperature 0.7 from global config\n</code></pre></p>"},{"location":"guides/global-config/#pattern-3-multi-environment","title":"Pattern 3: Multi-Environment","text":"<p>Use environment variables for environment-specific settings:</p> <p>Global config: <pre><code># ~/.holodeck/config.yaml\nproviders:\n  openai:\n    api_key: ${OPENAI_API_KEY_${ENV}}\n</code></pre></p> <p>Set environment: <pre><code>export ENV=prod\nexport OPENAI_API_KEY_prod=\"sk-prod-...\"\nexport OPENAI_API_KEY_dev=\"sk-dev-...\"\n</code></pre></p>"},{"location":"guides/global-config/#creating-global-config","title":"Creating Global Config","text":""},{"location":"guides/global-config/#step-1-create-directory","title":"Step 1: Create Directory","text":"<pre><code>mkdir -p ~/.holodeck\n</code></pre>"},{"location":"guides/global-config/#step-2-create-configyaml","title":"Step 2: Create config.yaml","text":"<p>Create <code>~/.holodeck/config.yaml</code>:</p> <pre><code>providers:\n  openai:\n    api_key: ${OPENAI_API_KEY}\n</code></pre>"},{"location":"guides/global-config/#step-3-set-environment-variables","title":"Step 3: Set Environment Variables","text":"<pre><code>export OPENAI_API_KEY=\"sk-...\"\n</code></pre>"},{"location":"guides/global-config/#step-4-verify","title":"Step 4: Verify","text":"<p>Test by running an agent:</p> <pre><code>holodeck test my-agent/agent.yaml\n</code></pre>"},{"location":"guides/global-config/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/global-config/#error-api_key-not-found","title":"Error: \"api_key not found\"","text":"<ul> <li>Check global config exists at <code>~/.holodeck/config.yaml</code></li> <li>Verify environment variable is set: <code>echo $OPENAI_API_KEY</code></li> <li>Check variable name matches in config</li> </ul>"},{"location":"guides/global-config/#error-invalid-provider","title":"Error: \"invalid provider\"","text":"<ul> <li>Check spelling of provider in agent.yaml</li> <li>Valid providers: <code>openai</code>, <code>azure_openai</code>, <code>anthropic</code></li> </ul>"},{"location":"guides/global-config/#agent-ignoring-global-config","title":"Agent ignoring global config","text":"<ul> <li>Verify global config file exists</li> <li>Check file permissions: <code>ls -la ~/.holodeck/</code></li> <li>Verify YAML syntax: <code>cat ~/.holodeck/config.yaml</code></li> </ul>"},{"location":"guides/global-config/#environment-variable-not-expanding","title":"Environment variable not expanding","text":"<ul> <li>Check syntax: <code>${VAR_NAME}</code> (with braces)</li> <li>Verify variable exists: <code>env | grep VAR_NAME</code></li> <li>Note: <code>$VAR_NAME</code> (without braces) is not expanded</li> </ul>"},{"location":"guides/global-config/#best-practices","title":"Best Practices","text":"<ol> <li>Keep Secrets Secure: Never commit API keys to version control</li> <li>Use Environment Variables: Store keys in env, not YAML</li> <li>Global Defaults: Use global config for shared organization settings</li> <li>Per-Agent Overrides: Use agent.yaml for agent-specific settings</li> <li>Don't Over-Configure: Keep global config minimal and focused</li> <li>Document Settings: Add comments to explain why settings exist</li> <li>Version Control: Commit <code>config.yaml.example</code> with placeholders, not real keys</li> </ol>"},{"location":"guides/global-config/#example-secure-setup","title":"Example: Secure Setup","text":"<pre><code># 1. Create global config with placeholders\nmkdir -p ~/.holodeck\n\ncat &gt; ~/.holodeck/config.yaml &lt;&lt; 'EOF'\nproviders:\n  openai:\n    api_key: ${OPENAI_API_KEY}\n    organization: my-org\nEOF\n\n# 2. Set environment variables in shell profile\n# Add to ~/.bashrc or ~/.zshrc\nexport OPENAI_API_KEY=\"sk-...\"\n\n# 3. Create agent config\ncat &gt; my-agent/agent.yaml &lt;&lt; 'EOF'\nname: my-agent\n\nmodel:\n  provider: openai\n  name: gpt-4o\n\ninstructions:\n  inline: \"You are helpful.\"\nEOF\n\n# 4. Run agent (global config automatically loaded)\nholodeck test my-agent/agent.yaml\n</code></pre>"},{"location":"guides/global-config/#next-steps","title":"Next Steps","text":"<ul> <li>See Agent Configuration Guide for agent-specific settings</li> <li>See File References Guide for path resolution</li> <li>See Environment Variables Documentation (future)</li> </ul>"},{"location":"guides/tools/","title":"Tools Reference Guide","text":"<p>This guide explains HoloDeck's four tool types that extend agent capabilities.</p>"},{"location":"guides/tools/#overview","title":"Overview","text":"<p>Tools are agent capabilities defined in <code>agent.yaml</code>. HoloDeck supports four tool types:</p> <ol> <li>Vectorstore Tools - Semantic search over data</li> <li>Function Tools - Custom Python functions</li> <li>MCP Tools - Model Context Protocol servers</li> <li>Prompt Tools - LLM-powered semantic functions</li> </ol>"},{"location":"guides/tools/#common-tool-fields","title":"Common Tool Fields","text":"<p>All tools share these fields:</p> <pre><code>tools:\n  - name: tool-id              # Required: Tool identifier (unique)\n    description: What it does  # Required: Human-readable description\n    type: vectorstore|function|mcp|prompt  # Required: Tool type\n</code></pre>"},{"location":"guides/tools/#name","title":"Name","text":"<ul> <li>Required: Yes</li> <li>Type: String</li> <li>Format: 1-100 characters, alphanumeric + underscores</li> <li>Uniqueness: Must be unique within agent</li> <li>Purpose: Used to reference tool in test cases, execution logs</li> </ul> <pre><code>- name: search_kb\n</code></pre>"},{"location":"guides/tools/#description","title":"Description","text":"<ul> <li>Required: Yes</li> <li>Type: String</li> <li>Max Length: 500 characters</li> <li>Purpose: Helps agent understand when to use this tool</li> </ul> <pre><code>- description: Search company knowledge base for answers\n</code></pre>"},{"location":"guides/tools/#type","title":"Type","text":"<ul> <li>Required: Yes</li> <li>Type: String (Enum)</li> <li>Options: <code>vectorstore</code>, <code>function</code>, <code>mcp</code>, <code>prompt</code></li> <li>Purpose: Determines which additional fields are required</li> </ul> <pre><code>- type: vectorstore\n</code></pre>"},{"location":"guides/tools/#vectorstore-tools","title":"Vectorstore Tools","text":"<p>Semantic search over unstructured or structured data.</p>"},{"location":"guides/tools/#when-to-use","title":"When to Use","text":"<ul> <li>Searching documents, knowledge bases, FAQs</li> <li>Semantic similarity matching</li> <li>Context retrieval for RAG (Retrieval-Augmented Generation)</li> </ul>"},{"location":"guides/tools/#basic-example","title":"Basic Example","text":"<pre><code>- name: search-kb\n  description: Search knowledge base for answers\n  type: vectorstore\n  source: knowledge_base/\n</code></pre>"},{"location":"guides/tools/#required-fields","title":"Required Fields","text":""},{"location":"guides/tools/#source","title":"Source","text":"<ul> <li>Type: String (path)</li> <li>Purpose: Data file or directory to index</li> <li>Formats Supported:</li> <li>Single files: <code>.txt</code>, <code>.md</code>, <code>.pdf</code>, <code>.json</code>, <code>.csv</code></li> <li>Directories: Recursively indexes supported formats</li> <li>Remote URLs: File auto-cached locally</li> </ul> <pre><code>source: knowledge_base/\n# OR\nsource: docs.json\n# OR\nsource: https://example.com/data.pdf\n</code></pre>"},{"location":"guides/tools/#optional-fields","title":"Optional Fields","text":""},{"location":"guides/tools/#embedding-model","title":"Embedding Model","text":"<ul> <li>Type: String</li> <li>Purpose: Which embedding model to use</li> <li>Default: Provider-specific default</li> <li>Examples: <code>text-embedding-3-small</code>, <code>text-embedding-ada-002</code></li> </ul> <pre><code>embedding_model: text-embedding-3-small\n</code></pre>"},{"location":"guides/tools/#vector-field","title":"Vector Field","text":"<ul> <li>Type: String or List of strings</li> <li>Purpose: Which field(s) to vectorize (for JSON/CSV)</li> <li>Default: Auto-detect text fields</li> <li>Note: XOR with <code>vector_fields</code> (use one or the other)</li> </ul> <pre><code>vector_field: content\n# OR\nvector_field: [title, description]\n</code></pre>"},{"location":"guides/tools/#meta-fields","title":"Meta Fields","text":"<ul> <li>Type: List of strings</li> <li>Purpose: Metadata fields to include in results</li> <li>Default: All fields included</li> </ul> <pre><code>meta_fields: [title, source, date]\n</code></pre>"},{"location":"guides/tools/#chunk-size","title":"Chunk Size","text":"<ul> <li>Type: Integer</li> <li>Purpose: Characters per chunk for text splitting</li> <li>Default: 512</li> <li>Constraint: Must be &gt; 0</li> </ul> <pre><code>chunk_size: 1024\n</code></pre>"},{"location":"guides/tools/#chunk-overlap","title":"Chunk Overlap","text":"<ul> <li>Type: Integer</li> <li>Purpose: Characters to overlap between chunks</li> <li>Default: 0</li> <li>Constraint: Must be &gt;= 0</li> </ul> <pre><code>chunk_overlap: 100\n</code></pre>"},{"location":"guides/tools/#record-path","title":"Record Path","text":"<ul> <li>Type: String</li> <li>Purpose: Path to array in nested JSON (dot notation)</li> <li>Example: For <code>{data: {items: [{...}]}}</code>, use <code>data.items</code></li> </ul> <pre><code>record_path: data.records\n</code></pre>"},{"location":"guides/tools/#record-prefix","title":"Record Prefix","text":"<ul> <li>Type: String</li> <li>Purpose: Prefix added to record fields</li> <li>Default: None</li> </ul> <pre><code>record_prefix: record_\n</code></pre>"},{"location":"guides/tools/#meta-prefix","title":"Meta Prefix","text":"<ul> <li>Type: String</li> <li>Purpose: Prefix added to metadata fields</li> <li>Default: None</li> </ul> <pre><code>meta_prefix: meta_\n</code></pre>"},{"location":"guides/tools/#complete-example","title":"Complete Example","text":"<pre><code>- name: search-docs\n  description: Search technical documentation\n  type: vectorstore\n  source: docs/\n  embedding_model: text-embedding-3-small\n  vector_field: [title, content]\n  meta_fields: [source, date, url]\n  chunk_size: 1024\n  chunk_overlap: 128\n</code></pre>"},{"location":"guides/tools/#data-format-examples","title":"Data Format Examples","text":"<p>Text Files (<code>.txt</code>, <code>.md</code>)</p> <pre><code># Document Title\n\nThis is the document content that will be\nvectorized for semantic search.\n</code></pre> <p>JSON (Array of objects)</p> <pre><code>[\n  {\n    \"title\": \"Getting Started\",\n    \"content\": \"How to get started with the platform...\",\n    \"source\": \"docs/intro.md\"\n  }\n]\n</code></pre> <p>JSON (Nested structure)</p> <pre><code>{\n  \"data\": {\n    \"records\": [\n      {\n        \"id\": 1,\n        \"title\": \"Article 1\",\n        \"content\": \"...\"\n      }\n    ]\n  }\n}\n</code></pre> <p>Use <code>record_path: data.records</code> to access records.</p> <p>CSV</p> <pre><code>title,content,source\n\"Getting Started\",\"How to get started...\",\"docs/intro\"\n\"API Reference\",\"API documentation...\",\"docs/api\"\n</code></pre>"},{"location":"guides/tools/#function-tools","title":"Function Tools","text":"<p>Execute custom Python functions.</p>"},{"location":"guides/tools/#when-to-use_1","title":"When to Use","text":"<ul> <li>Custom business logic</li> <li>Database queries</li> <li>System operations</li> <li>Complex calculations</li> </ul>"},{"location":"guides/tools/#basic-example_1","title":"Basic Example","text":"<pre><code>- name: get-user\n  description: Look up user information\n  type: function\n  file: tools/users.py\n  function: get_user\n</code></pre>"},{"location":"guides/tools/#required-fields_1","title":"Required Fields","text":""},{"location":"guides/tools/#file","title":"File","text":"<ul> <li>Type: String (path)</li> <li>Purpose: Python file containing the function</li> <li>Path: Relative to <code>agent.yaml</code> directory</li> <li>Format: Standard Python module</li> </ul> <pre><code>file: tools/users.py\n</code></pre>"},{"location":"guides/tools/#function","title":"Function","text":"<ul> <li>Type: String</li> <li>Purpose: Function name to call</li> <li>Format: Valid Python identifier</li> </ul> <pre><code>function: get_user\n</code></pre>"},{"location":"guides/tools/#optional-fields_1","title":"Optional Fields","text":""},{"location":"guides/tools/#parameters","title":"Parameters","text":"<ul> <li>Type: Object mapping parameter names to schemas</li> <li>Purpose: Define function parameters the agent can pass</li> <li>Default: No parameters (function takes no args)</li> </ul> <pre><code>parameters:\n  user_id:\n    type: string\n    description: User identifier\n  include_details:\n    type: boolean\n    description: Include detailed information\n</code></pre> <p>Parameter schema fields:</p> <ul> <li><code>type</code>: <code>string</code>, <code>integer</code>, <code>float</code>, <code>boolean</code>, <code>array</code>, <code>object</code></li> <li><code>description</code>: What the parameter is for</li> <li><code>enum</code>: Optional list of allowed values</li> <li><code>default</code>: Optional default value</li> </ul>"},{"location":"guides/tools/#complete-example_1","title":"Complete Example","text":"<pre><code>- name: create-ticket\n  description: Create a support ticket\n  type: function\n  file: tools/support.py\n  function: create_ticket\n  parameters:\n    title:\n      type: string\n      description: Ticket title (required)\n    priority:\n      type: string\n      description: Ticket priority\n      enum: [low, medium, high]\n    description:\n      type: string\n      description: Detailed description\n</code></pre>"},{"location":"guides/tools/#python-function-format","title":"Python Function Format","text":"<pre><code># tools/support.py\n\ndef create_ticket(title: str, priority: str = \"medium\", description: str = \"\") -&gt; dict:\n    \"\"\"\n    Create a support ticket.\n\n    Args:\n        title: Ticket title\n        priority: low|medium|high\n        description: Detailed description\n\n    Returns:\n        Created ticket data\n    \"\"\"\n    return {\n        \"id\": \"TICKET-123\",\n        \"status\": \"open\",\n        \"title\": title,\n        \"priority\": priority,\n    }\n</code></pre>"},{"location":"guides/tools/#best-practices","title":"Best Practices","text":"<ul> <li>Keep functions focused on single tasks</li> <li>Use clear parameter names</li> <li>Add type hints and docstrings</li> <li>Handle errors gracefully (return error messages)</li> <li>Return JSON-serializable data</li> <li>Avoid long-running operations (prefer async tools in future versions)</li> </ul>"},{"location":"guides/tools/#mcp-tools","title":"MCP Tools","text":"<p>Model Context Protocol server integrations.</p>"},{"location":"guides/tools/#when-to-use_2","title":"When to Use","text":"<ul> <li>GitHub, GitLab operations</li> <li>Database access</li> <li>File system operations</li> <li>Any standardized MCP server</li> </ul>"},{"location":"guides/tools/#basic-example_2","title":"Basic Example","text":"<pre><code>- name: file-system\n  description: Access file system\n  type: mcp\n  server: \"@modelcontextprotocol/server-filesystem\"\n</code></pre>"},{"location":"guides/tools/#required-fields_2","title":"Required Fields","text":""},{"location":"guides/tools/#server","title":"Server","text":"<ul> <li>Type: String</li> <li>Purpose: MCP server identifier</li> <li>Formats:</li> <li>Package name: <code>@modelcontextprotocol/server-filesystem</code></li> <li>Local path: <code>/path/to/server</code></li> <li>Custom identifier: <code>my-custom-server</code></li> </ul> <pre><code>server: \"@modelcontextprotocol/server-filesystem\"\n</code></pre>"},{"location":"guides/tools/#optional-fields_2","title":"Optional Fields","text":""},{"location":"guides/tools/#config","title":"Config","text":"<ul> <li>Type: Object (free-form)</li> <li>Purpose: MCP server-specific configuration</li> <li>Validation: MCP server validates at runtime</li> </ul> <pre><code>config:\n  allowed_directories: [\"/data\", \"/tmp\"]\n  max_file_size: 1048576  # 1MB\n</code></pre>"},{"location":"guides/tools/#available-mcp-servers","title":"Available MCP Servers","text":""},{"location":"guides/tools/#filesystem","title":"Filesystem","text":"<pre><code>- name: filesystem\n  type: mcp\n  server: \"@modelcontextprotocol/server-filesystem\"\n  config:\n    allowed_directories: [\"/home/user/data\"]\n</code></pre> <p>Resources: List files, read files, write files, create directories</p>"},{"location":"guides/tools/#github","title":"GitHub","text":"<pre><code>- name: github\n  type: mcp\n  server: \"@modelcontextprotocol/server-github\"\n  config:\n    access_token: \"${GITHUB_TOKEN}\"\n    repository: \"user/repo\"\n</code></pre> <p>Resources: List issues, create issues, read files, etc.</p>"},{"location":"guides/tools/#sqlite","title":"SQLite","text":"<pre><code>- name: sqlite\n  type: mcp\n  server: \"@modelcontextprotocol/server-sqlite\"\n  config:\n    database: \"/path/to/database.db\"\n</code></pre> <p>Resources: Query database, list tables, etc.</p>"},{"location":"guides/tools/#custom-mcp-servers","title":"Custom MCP Servers","text":"<p>To create a custom MCP server:</p> <ol> <li>Implement MCP protocol</li> <li>Deploy as standalone service or Python package</li> <li>Reference by path or package identifier</li> </ol> <pre><code>- name: custom-service\n  type: mcp\n  server: \"/path/to/custom_server.py\"\n  config:\n    api_url: \"http://localhost:8000\"\n</code></pre>"},{"location":"guides/tools/#prompt-tools","title":"Prompt Tools","text":"<p>LLM-powered semantic functions with template substitution.</p>"},{"location":"guides/tools/#when-to-use_3","title":"When to Use","text":"<ul> <li>Text generation with templates</li> <li>Specialized prompts for specific tasks</li> <li>Reusable prompt chains</li> <li>A/B testing different prompts</li> </ul>"},{"location":"guides/tools/#basic-example_3","title":"Basic Example","text":"<pre><code>- name: summarize\n  description: Summarize text into key points\n  type: prompt\n  template: \"Summarize this in 3 bullet points: {{text}}\"\n  parameters:\n    text:\n      type: string\n      description: Text to summarize\n</code></pre>"},{"location":"guides/tools/#required-fields_3","title":"Required Fields","text":""},{"location":"guides/tools/#template-or-file","title":"Template or File","text":"<p>Either <code>template</code> (inline) or <code>file</code> (external), not both:</p> <p>Inline Template</p> <ul> <li>Type: String</li> <li>Max Length: 5000 characters</li> <li>Syntax: Mustache-style <code>{{variable}}</code></li> </ul> <pre><code>template: \"Summarize: {{content}}\"\n</code></pre> <p>Template File</p> <ul> <li>Type: String (path)</li> <li>Path: Relative to <code>agent.yaml</code></li> </ul> <pre><code>file: prompts/summarize.txt\n</code></pre> <p>File contents:</p> <pre><code>Summarize this text in 3 bullet points:\n\n{{text}}\n\nFocus on key takeaways.\n</code></pre>"},{"location":"guides/tools/#parameters_1","title":"Parameters","text":"<ul> <li>Type: Object mapping parameter names to schemas</li> <li>Purpose: Template variables the agent can fill</li> <li>Required: Yes (at least one)</li> </ul> <pre><code>parameters:\n  text:\n    type: string\n    description: Text to process\n</code></pre>"},{"location":"guides/tools/#optional-fields_3","title":"Optional Fields","text":""},{"location":"guides/tools/#model-override","title":"Model Override","text":"<ul> <li>Type: Model configuration object</li> <li>Purpose: Use different model for this tool</li> <li>Default: Uses agent's model</li> </ul> <pre><code>model:\n  provider: openai\n  name: gpt-4  # Different from agent's model\n  temperature: 0.2\n</code></pre>"},{"location":"guides/tools/#complete-example_2","title":"Complete Example","text":"<pre><code>- name: code-reviewer\n  description: Review code for best practices\n  type: prompt\n  file: prompts/code_review.txt\n  model:\n    provider: openai\n    name: gpt-4\n    temperature: 0.3\n  parameters:\n    code:\n      type: string\n      description: Code to review\n    language:\n      type: string\n      description: Programming language\n      enum: [python, javascript, go, java]\n</code></pre> <p>Template file (<code>prompts/code_review.txt</code>):</p> <pre><code>Review this {{language}} code for best practices.\n\nCode:\n{{code}}\n\nProvide:\n1. Issues found\n2. Suggestions for improvement\n3. Security considerations\n</code></pre>"},{"location":"guides/tools/#template-syntax","title":"Template Syntax","text":"<p>Variables use Mustache-style syntax:</p> <pre><code>Simple variable: {{name}}\n\nConditionals (if parameter provided):\n{{#if description}}\nDescription: {{description}}\n{{/if}}\n\nLoops (if parameter is array):\n{{#each items}}\n- {{this}}\n{{/each}}\n</code></pre>"},{"location":"guides/tools/#tool-comparison","title":"Tool Comparison","text":"Feature Vectorstore Function MCP Prompt Use Case Search data Custom logic Integrations Template-based Execution Vector similarity Python function MCP protocol LLM generation Setup Data files Python files Server config Template text Parameters Implicit (search query) Defined in code Server-specific Defined in YAML Latency Medium (~100ms) Low (&lt;10ms) Medium High (LLM call) Cost Embedding API Internal Service cost LLM tokens"},{"location":"guides/tools/#common-patterns","title":"Common Patterns","text":""},{"location":"guides/tools/#knowledge-base-search","title":"Knowledge Base Search","text":"<pre><code>- name: search-kb\n  type: vectorstore\n  source: kb/\n  chunk_size: 512\n  embedding_model: text-embedding-3-small\n</code></pre>"},{"location":"guides/tools/#database-query","title":"Database Query","text":"<pre><code>- name: query-db\n  type: function\n  file: tools/db.py\n  function: query\n  parameters:\n    sql:\n      type: string\n</code></pre>"},{"location":"guides/tools/#file-operations","title":"File Operations","text":"<pre><code>- name: filesystem\n  type: mcp\n  server: \"@modelcontextprotocol/server-filesystem\"\n  config:\n    allowed_directories: [\"/data\"]\n</code></pre>"},{"location":"guides/tools/#text-transformation","title":"Text Transformation","text":"<pre><code>- name: translate\n  type: prompt\n  template: \"Translate to {{language}}: {{text}}\"\n  parameters:\n    text:\n      type: string\n    language:\n      type: string\n</code></pre>"},{"location":"guides/tools/#error-handling","title":"Error Handling","text":""},{"location":"guides/tools/#vectorstore-tool-errors","title":"Vectorstore Tool Errors","text":"<ul> <li>No data found: Returns empty results</li> <li>Invalid path: Error during agent startup (config validation)</li> <li>Unsupported format: Error during agent startup</li> </ul>"},{"location":"guides/tools/#function-tool-errors","title":"Function Tool Errors","text":"<ul> <li>Function not found: Error during agent startup</li> <li>Runtime error: Caught and returned as error message</li> <li>Type mismatch: Type checking during agent startup</li> </ul>"},{"location":"guides/tools/#mcp-tool-errors","title":"MCP Tool Errors","text":"<ul> <li>Server unavailable: Soft failure (logged, empty results)</li> <li>Permission denied: Soft failure (logged)</li> <li>Invalid config: Error during agent startup</li> </ul>"},{"location":"guides/tools/#prompt-tool-errors","title":"Prompt Tool Errors","text":"<ul> <li>Invalid template: Error during agent startup</li> <li>LLM failure: Soft failure (logged, error message returned)</li> <li>Template rendering: Error during execution</li> </ul>"},{"location":"guides/tools/#performance-tips","title":"Performance Tips","text":""},{"location":"guides/tools/#vectorstore-tools_1","title":"Vectorstore Tools","text":"<ul> <li>Use appropriate chunk size (larger = fewer embeddings)</li> <li>Enable caching for remote files</li> <li>Reduce <code>vector_field</code> count if possible</li> <li>Index only necessary fields</li> </ul>"},{"location":"guides/tools/#function-tools_1","title":"Function Tools","text":"<ul> <li>Keep functions fast (&lt;1 second)</li> <li>Use connection pooling for databases</li> <li>Cache results when possible</li> </ul>"},{"location":"guides/tools/#mcp-tools_1","title":"MCP Tools","text":"<ul> <li>Use server-side filtering when available</li> <li>Limit result sets</li> <li>Cache responses locally</li> </ul>"},{"location":"guides/tools/#prompt-tools_1","title":"Prompt Tools","text":"<ul> <li>Use simpler models for repeated operations</li> <li>Batch processing when possible</li> <li>Limit template complexity</li> </ul>"},{"location":"guides/tools/#best-practices_1","title":"Best Practices","text":"<ol> <li>Clear Names: Use descriptive tool names</li> <li>Clear Descriptions: Agent uses description to decide when to call tool</li> <li>Parameters: Define expected parameters clearly</li> <li>Error Handling: Handle errors gracefully</li> <li>Performance: Test with realistic data</li> <li>Versioning: Manage tool file versions in source control</li> <li>Testing: Include test cases that exercise each tool</li> </ol>"},{"location":"guides/tools/#next-steps","title":"Next Steps","text":"<ul> <li>See Agent Configuration Guide for tool usage</li> <li>See File References Guide for path resolution</li> <li>See Examples for complete tool usage</li> </ul>"}]}